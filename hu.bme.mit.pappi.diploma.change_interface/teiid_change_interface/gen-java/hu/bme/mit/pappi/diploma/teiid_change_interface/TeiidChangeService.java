/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.bme.mit.pappi.diploma.teiid_change_interface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TeiidChangeService {

  public interface Iface {

    public long datasourceChanged(String dsName, String tableName, String changeId, String changeType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void datasourceChanged(String dsName, String tableName, String changeId, String changeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long datasourceChanged(String dsName, String tableName, String changeId, String changeType) throws org.apache.thrift.TException
    {
      send_datasourceChanged(dsName, tableName, changeId, changeType);
      return recv_datasourceChanged();
    }

    public void send_datasourceChanged(String dsName, String tableName, String changeId, String changeType) throws org.apache.thrift.TException
    {
      datasourceChanged_args args = new datasourceChanged_args();
      args.setDsName(dsName);
      args.setTableName(tableName);
      args.setChangeId(changeId);
      args.setChangeType(changeType);
      sendBase("datasourceChanged", args);
    }

    public long recv_datasourceChanged() throws org.apache.thrift.TException
    {
      datasourceChanged_result result = new datasourceChanged_result();
      receiveBase(result, "datasourceChanged");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "datasourceChanged failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void datasourceChanged(String dsName, String tableName, String changeId, String changeType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      datasourceChanged_call method_call = new datasourceChanged_call(dsName, tableName, changeId, changeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class datasourceChanged_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dsName;
      private String tableName;
      private String changeId;
      private String changeType;
      public datasourceChanged_call(String dsName, String tableName, String changeId, String changeType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dsName = dsName;
        this.tableName = tableName;
        this.changeId = changeId;
        this.changeType = changeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("datasourceChanged", org.apache.thrift.protocol.TMessageType.CALL, 0));
        datasourceChanged_args args = new datasourceChanged_args();
        args.setDsName(dsName);
        args.setTableName(tableName);
        args.setChangeId(changeId);
        args.setChangeType(changeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_datasourceChanged();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("datasourceChanged", new datasourceChanged());
      return processMap;
    }

    public static class datasourceChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, datasourceChanged_args> {
      public datasourceChanged() {
        super("datasourceChanged");
      }

      public datasourceChanged_args getEmptyArgsInstance() {
        return new datasourceChanged_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public datasourceChanged_result getResult(I iface, datasourceChanged_args args) throws org.apache.thrift.TException {
        datasourceChanged_result result = new datasourceChanged_result();
        result.success = iface.datasourceChanged(args.dsName, args.tableName, args.changeId, args.changeType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("datasourceChanged", new datasourceChanged());
      return processMap;
    }

    public static class datasourceChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, datasourceChanged_args, Long> {
      public datasourceChanged() {
        super("datasourceChanged");
      }

      public datasourceChanged_args getEmptyArgsInstance() {
        return new datasourceChanged_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            datasourceChanged_result result = new datasourceChanged_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            datasourceChanged_result result = new datasourceChanged_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, datasourceChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.datasourceChanged(args.dsName, args.tableName, args.changeId, args.changeType,resultHandler);
      }
    }

  }

  public static class datasourceChanged_args implements org.apache.thrift.TBase<datasourceChanged_args, datasourceChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<datasourceChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("datasourceChanged_args");

    private static final org.apache.thrift.protocol.TField DS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("changeId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHANGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("changeType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new datasourceChanged_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new datasourceChanged_argsTupleSchemeFactory());
    }

    public String dsName; // required
    public String tableName; // required
    public String changeId; // required
    public String changeType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_NAME((short)1, "dsName"),
      TABLE_NAME((short)2, "tableName"),
      CHANGE_ID((short)3, "changeId"),
      CHANGE_TYPE((short)4, "changeType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_NAME
            return DS_NAME;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CHANGE_ID
            return CHANGE_ID;
          case 4: // CHANGE_TYPE
            return CHANGE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_NAME, new org.apache.thrift.meta_data.FieldMetaData("dsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("changeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("changeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(datasourceChanged_args.class, metaDataMap);
    }

    public datasourceChanged_args() {
    }

    public datasourceChanged_args(
      String dsName,
      String tableName,
      String changeId,
      String changeType)
    {
      this();
      this.dsName = dsName;
      this.tableName = tableName;
      this.changeId = changeId;
      this.changeType = changeType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public datasourceChanged_args(datasourceChanged_args other) {
      if (other.isSetDsName()) {
        this.dsName = other.dsName;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetChangeId()) {
        this.changeId = other.changeId;
      }
      if (other.isSetChangeType()) {
        this.changeType = other.changeType;
      }
    }

    public datasourceChanged_args deepCopy() {
      return new datasourceChanged_args(this);
    }

    @Override
    public void clear() {
      this.dsName = null;
      this.tableName = null;
      this.changeId = null;
      this.changeType = null;
    }

    public String getDsName() {
      return this.dsName;
    }

    public datasourceChanged_args setDsName(String dsName) {
      this.dsName = dsName;
      return this;
    }

    public void unsetDsName() {
      this.dsName = null;
    }

    /** Returns true if field dsName is set (has been assigned a value) and false otherwise */
    public boolean isSetDsName() {
      return this.dsName != null;
    }

    public void setDsNameIsSet(boolean value) {
      if (!value) {
        this.dsName = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public datasourceChanged_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getChangeId() {
      return this.changeId;
    }

    public datasourceChanged_args setChangeId(String changeId) {
      this.changeId = changeId;
      return this;
    }

    public void unsetChangeId() {
      this.changeId = null;
    }

    /** Returns true if field changeId is set (has been assigned a value) and false otherwise */
    public boolean isSetChangeId() {
      return this.changeId != null;
    }

    public void setChangeIdIsSet(boolean value) {
      if (!value) {
        this.changeId = null;
      }
    }

    public String getChangeType() {
      return this.changeType;
    }

    public datasourceChanged_args setChangeType(String changeType) {
      this.changeType = changeType;
      return this;
    }

    public void unsetChangeType() {
      this.changeType = null;
    }

    /** Returns true if field changeType is set (has been assigned a value) and false otherwise */
    public boolean isSetChangeType() {
      return this.changeType != null;
    }

    public void setChangeTypeIsSet(boolean value) {
      if (!value) {
        this.changeType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_NAME:
        if (value == null) {
          unsetDsName();
        } else {
          setDsName((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case CHANGE_ID:
        if (value == null) {
          unsetChangeId();
        } else {
          setChangeId((String)value);
        }
        break;

      case CHANGE_TYPE:
        if (value == null) {
          unsetChangeType();
        } else {
          setChangeType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_NAME:
        return getDsName();

      case TABLE_NAME:
        return getTableName();

      case CHANGE_ID:
        return getChangeId();

      case CHANGE_TYPE:
        return getChangeType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_NAME:
        return isSetDsName();
      case TABLE_NAME:
        return isSetTableName();
      case CHANGE_ID:
        return isSetChangeId();
      case CHANGE_TYPE:
        return isSetChangeType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof datasourceChanged_args)
        return this.equals((datasourceChanged_args)that);
      return false;
    }

    public boolean equals(datasourceChanged_args that) {
      if (that == null)
        return false;

      boolean this_present_dsName = true && this.isSetDsName();
      boolean that_present_dsName = true && that.isSetDsName();
      if (this_present_dsName || that_present_dsName) {
        if (!(this_present_dsName && that_present_dsName))
          return false;
        if (!this.dsName.equals(that.dsName))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_changeId = true && this.isSetChangeId();
      boolean that_present_changeId = true && that.isSetChangeId();
      if (this_present_changeId || that_present_changeId) {
        if (!(this_present_changeId && that_present_changeId))
          return false;
        if (!this.changeId.equals(that.changeId))
          return false;
      }

      boolean this_present_changeType = true && this.isSetChangeType();
      boolean that_present_changeType = true && that.isSetChangeType();
      if (this_present_changeType || that_present_changeType) {
        if (!(this_present_changeType && that_present_changeType))
          return false;
        if (!this.changeType.equals(that.changeType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(datasourceChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsName()).compareTo(other.isSetDsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsName, other.dsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChangeId()).compareTo(other.isSetChangeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChangeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeId, other.changeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChangeType()).compareTo(other.isSetChangeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChangeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeType, other.changeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("datasourceChanged_args(");
      boolean first = true;

      sb.append("dsName:");
      if (this.dsName == null) {
        sb.append("null");
      } else {
        sb.append(this.dsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("changeId:");
      if (this.changeId == null) {
        sb.append("null");
      } else {
        sb.append(this.changeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("changeType:");
      if (this.changeType == null) {
        sb.append("null");
      } else {
        sb.append(this.changeType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class datasourceChanged_argsStandardSchemeFactory implements SchemeFactory {
      public datasourceChanged_argsStandardScheme getScheme() {
        return new datasourceChanged_argsStandardScheme();
      }
    }

    private static class datasourceChanged_argsStandardScheme extends StandardScheme<datasourceChanged_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, datasourceChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsName = iprot.readString();
                struct.setDsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.changeId = iprot.readString();
                struct.setChangeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHANGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.changeType = iprot.readString();
                struct.setChangeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, datasourceChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsName != null) {
          oprot.writeFieldBegin(DS_NAME_FIELD_DESC);
          oprot.writeString(struct.dsName);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.changeId != null) {
          oprot.writeFieldBegin(CHANGE_ID_FIELD_DESC);
          oprot.writeString(struct.changeId);
          oprot.writeFieldEnd();
        }
        if (struct.changeType != null) {
          oprot.writeFieldBegin(CHANGE_TYPE_FIELD_DESC);
          oprot.writeString(struct.changeType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class datasourceChanged_argsTupleSchemeFactory implements SchemeFactory {
      public datasourceChanged_argsTupleScheme getScheme() {
        return new datasourceChanged_argsTupleScheme();
      }
    }

    private static class datasourceChanged_argsTupleScheme extends TupleScheme<datasourceChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, datasourceChanged_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDsName()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetChangeId()) {
          optionals.set(2);
        }
        if (struct.isSetChangeType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDsName()) {
          oprot.writeString(struct.dsName);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetChangeId()) {
          oprot.writeString(struct.changeId);
        }
        if (struct.isSetChangeType()) {
          oprot.writeString(struct.changeType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, datasourceChanged_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dsName = iprot.readString();
          struct.setDsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.changeId = iprot.readString();
          struct.setChangeIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.changeType = iprot.readString();
          struct.setChangeTypeIsSet(true);
        }
      }
    }

  }

  public static class datasourceChanged_result implements org.apache.thrift.TBase<datasourceChanged_result, datasourceChanged_result._Fields>, java.io.Serializable, Cloneable, Comparable<datasourceChanged_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("datasourceChanged_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new datasourceChanged_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new datasourceChanged_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(datasourceChanged_result.class, metaDataMap);
    }

    public datasourceChanged_result() {
    }

    public datasourceChanged_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public datasourceChanged_result(datasourceChanged_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public datasourceChanged_result deepCopy() {
      return new datasourceChanged_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public datasourceChanged_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof datasourceChanged_result)
        return this.equals((datasourceChanged_result)that);
      return false;
    }

    public boolean equals(datasourceChanged_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(datasourceChanged_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("datasourceChanged_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class datasourceChanged_resultStandardSchemeFactory implements SchemeFactory {
      public datasourceChanged_resultStandardScheme getScheme() {
        return new datasourceChanged_resultStandardScheme();
      }
    }

    private static class datasourceChanged_resultStandardScheme extends StandardScheme<datasourceChanged_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, datasourceChanged_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, datasourceChanged_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class datasourceChanged_resultTupleSchemeFactory implements SchemeFactory {
      public datasourceChanged_resultTupleScheme getScheme() {
        return new datasourceChanged_resultTupleScheme();
      }
    }

    private static class datasourceChanged_resultTupleScheme extends TupleScheme<datasourceChanged_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, datasourceChanged_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, datasourceChanged_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
