/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.bme.mit.pappi.diploma.mondix_change_interface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BinaryTuple implements org.apache.thrift.TBase<BinaryTuple, BinaryTuple._Fields>, java.io.Serializable, Cloneable, Comparable<BinaryTuple> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BinaryTuple");

  private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE1_FIELD_DESC = new org.apache.thrift.protocol.TField("value1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("column2", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE2_FIELD_DESC = new org.apache.thrift.protocol.TField("value2", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BinaryTupleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BinaryTupleTupleSchemeFactory());
  }

  public String relationName; // required
  public String column1; // required
  public String value1; // required
  public String column2; // required
  public String value2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATION_NAME((short)1, "relationName"),
    COLUMN1((short)2, "column1"),
    VALUE1((short)3, "value1"),
    COLUMN2((short)4, "column2"),
    VALUE2((short)5, "value2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATION_NAME
          return RELATION_NAME;
        case 2: // COLUMN1
          return COLUMN1;
        case 3: // VALUE1
          return VALUE1;
        case 4: // COLUMN2
          return COLUMN2;
        case 5: // VALUE2
          return VALUE2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE1, new org.apache.thrift.meta_data.FieldMetaData("value1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE2, new org.apache.thrift.meta_data.FieldMetaData("value2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BinaryTuple.class, metaDataMap);
  }

  public BinaryTuple() {
  }

  public BinaryTuple(
    String relationName,
    String column1,
    String value1,
    String column2,
    String value2)
  {
    this();
    this.relationName = relationName;
    this.column1 = column1;
    this.value1 = value1;
    this.column2 = column2;
    this.value2 = value2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BinaryTuple(BinaryTuple other) {
    if (other.isSetRelationName()) {
      this.relationName = other.relationName;
    }
    if (other.isSetColumn1()) {
      this.column1 = other.column1;
    }
    if (other.isSetValue1()) {
      this.value1 = other.value1;
    }
    if (other.isSetColumn2()) {
      this.column2 = other.column2;
    }
    if (other.isSetValue2()) {
      this.value2 = other.value2;
    }
  }

  public BinaryTuple deepCopy() {
    return new BinaryTuple(this);
  }

  @Override
  public void clear() {
    this.relationName = null;
    this.column1 = null;
    this.value1 = null;
    this.column2 = null;
    this.value2 = null;
  }

  public String getRelationName() {
    return this.relationName;
  }

  public BinaryTuple setRelationName(String relationName) {
    this.relationName = relationName;
    return this;
  }

  public void unsetRelationName() {
    this.relationName = null;
  }

  /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationName() {
    return this.relationName != null;
  }

  public void setRelationNameIsSet(boolean value) {
    if (!value) {
      this.relationName = null;
    }
  }

  public String getColumn1() {
    return this.column1;
  }

  public BinaryTuple setColumn1(String column1) {
    this.column1 = column1;
    return this;
  }

  public void unsetColumn1() {
    this.column1 = null;
  }

  /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn1() {
    return this.column1 != null;
  }

  public void setColumn1IsSet(boolean value) {
    if (!value) {
      this.column1 = null;
    }
  }

  public String getValue1() {
    return this.value1;
  }

  public BinaryTuple setValue1(String value1) {
    this.value1 = value1;
    return this;
  }

  public void unsetValue1() {
    this.value1 = null;
  }

  /** Returns true if field value1 is set (has been assigned a value) and false otherwise */
  public boolean isSetValue1() {
    return this.value1 != null;
  }

  public void setValue1IsSet(boolean value) {
    if (!value) {
      this.value1 = null;
    }
  }

  public String getColumn2() {
    return this.column2;
  }

  public BinaryTuple setColumn2(String column2) {
    this.column2 = column2;
    return this;
  }

  public void unsetColumn2() {
    this.column2 = null;
  }

  /** Returns true if field column2 is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn2() {
    return this.column2 != null;
  }

  public void setColumn2IsSet(boolean value) {
    if (!value) {
      this.column2 = null;
    }
  }

  public String getValue2() {
    return this.value2;
  }

  public BinaryTuple setValue2(String value2) {
    this.value2 = value2;
    return this;
  }

  public void unsetValue2() {
    this.value2 = null;
  }

  /** Returns true if field value2 is set (has been assigned a value) and false otherwise */
  public boolean isSetValue2() {
    return this.value2 != null;
  }

  public void setValue2IsSet(boolean value) {
    if (!value) {
      this.value2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATION_NAME:
      if (value == null) {
        unsetRelationName();
      } else {
        setRelationName((String)value);
      }
      break;

    case COLUMN1:
      if (value == null) {
        unsetColumn1();
      } else {
        setColumn1((String)value);
      }
      break;

    case VALUE1:
      if (value == null) {
        unsetValue1();
      } else {
        setValue1((String)value);
      }
      break;

    case COLUMN2:
      if (value == null) {
        unsetColumn2();
      } else {
        setColumn2((String)value);
      }
      break;

    case VALUE2:
      if (value == null) {
        unsetValue2();
      } else {
        setValue2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATION_NAME:
      return getRelationName();

    case COLUMN1:
      return getColumn1();

    case VALUE1:
      return getValue1();

    case COLUMN2:
      return getColumn2();

    case VALUE2:
      return getValue2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATION_NAME:
      return isSetRelationName();
    case COLUMN1:
      return isSetColumn1();
    case VALUE1:
      return isSetValue1();
    case COLUMN2:
      return isSetColumn2();
    case VALUE2:
      return isSetValue2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BinaryTuple)
      return this.equals((BinaryTuple)that);
    return false;
  }

  public boolean equals(BinaryTuple that) {
    if (that == null)
      return false;

    boolean this_present_relationName = true && this.isSetRelationName();
    boolean that_present_relationName = true && that.isSetRelationName();
    if (this_present_relationName || that_present_relationName) {
      if (!(this_present_relationName && that_present_relationName))
        return false;
      if (!this.relationName.equals(that.relationName))
        return false;
    }

    boolean this_present_column1 = true && this.isSetColumn1();
    boolean that_present_column1 = true && that.isSetColumn1();
    if (this_present_column1 || that_present_column1) {
      if (!(this_present_column1 && that_present_column1))
        return false;
      if (!this.column1.equals(that.column1))
        return false;
    }

    boolean this_present_value1 = true && this.isSetValue1();
    boolean that_present_value1 = true && that.isSetValue1();
    if (this_present_value1 || that_present_value1) {
      if (!(this_present_value1 && that_present_value1))
        return false;
      if (!this.value1.equals(that.value1))
        return false;
    }

    boolean this_present_column2 = true && this.isSetColumn2();
    boolean that_present_column2 = true && that.isSetColumn2();
    if (this_present_column2 || that_present_column2) {
      if (!(this_present_column2 && that_present_column2))
        return false;
      if (!this.column2.equals(that.column2))
        return false;
    }

    boolean this_present_value2 = true && this.isSetValue2();
    boolean that_present_value2 = true && that.isSetValue2();
    if (this_present_value2 || that_present_value2) {
      if (!(this_present_value2 && that_present_value2))
        return false;
      if (!this.value2.equals(that.value2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BinaryTuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue1()).compareTo(other.isSetValue1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value1, other.value1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn2()).compareTo(other.isSetColumn2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column2, other.column2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue2()).compareTo(other.isSetValue2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value2, other.value2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BinaryTuple(");
    boolean first = true;

    sb.append("relationName:");
    if (this.relationName == null) {
      sb.append("null");
    } else {
      sb.append(this.relationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column1:");
    if (this.column1 == null) {
      sb.append("null");
    } else {
      sb.append(this.column1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value1:");
    if (this.value1 == null) {
      sb.append("null");
    } else {
      sb.append(this.value1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column2:");
    if (this.column2 == null) {
      sb.append("null");
    } else {
      sb.append(this.column2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value2:");
    if (this.value2 == null) {
      sb.append("null");
    } else {
      sb.append(this.value2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BinaryTupleStandardSchemeFactory implements SchemeFactory {
    public BinaryTupleStandardScheme getScheme() {
      return new BinaryTupleStandardScheme();
    }
  }

  private static class BinaryTupleStandardScheme extends StandardScheme<BinaryTuple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BinaryTuple struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relationName = iprot.readString();
              struct.setRelationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column1 = iprot.readString();
              struct.setColumn1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value1 = iprot.readString();
              struct.setValue1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column2 = iprot.readString();
              struct.setColumn2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value2 = iprot.readString();
              struct.setValue2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BinaryTuple struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relationName != null) {
        oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
        oprot.writeString(struct.relationName);
        oprot.writeFieldEnd();
      }
      if (struct.column1 != null) {
        oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
        oprot.writeString(struct.column1);
        oprot.writeFieldEnd();
      }
      if (struct.value1 != null) {
        oprot.writeFieldBegin(VALUE1_FIELD_DESC);
        oprot.writeString(struct.value1);
        oprot.writeFieldEnd();
      }
      if (struct.column2 != null) {
        oprot.writeFieldBegin(COLUMN2_FIELD_DESC);
        oprot.writeString(struct.column2);
        oprot.writeFieldEnd();
      }
      if (struct.value2 != null) {
        oprot.writeFieldBegin(VALUE2_FIELD_DESC);
        oprot.writeString(struct.value2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BinaryTupleTupleSchemeFactory implements SchemeFactory {
    public BinaryTupleTupleScheme getScheme() {
      return new BinaryTupleTupleScheme();
    }
  }

  private static class BinaryTupleTupleScheme extends TupleScheme<BinaryTuple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BinaryTuple struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelationName()) {
        optionals.set(0);
      }
      if (struct.isSetColumn1()) {
        optionals.set(1);
      }
      if (struct.isSetValue1()) {
        optionals.set(2);
      }
      if (struct.isSetColumn2()) {
        optionals.set(3);
      }
      if (struct.isSetValue2()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRelationName()) {
        oprot.writeString(struct.relationName);
      }
      if (struct.isSetColumn1()) {
        oprot.writeString(struct.column1);
      }
      if (struct.isSetValue1()) {
        oprot.writeString(struct.value1);
      }
      if (struct.isSetColumn2()) {
        oprot.writeString(struct.column2);
      }
      if (struct.isSetValue2()) {
        oprot.writeString(struct.value2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BinaryTuple struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.relationName = iprot.readString();
        struct.setRelationNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.column1 = iprot.readString();
        struct.setColumn1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.value1 = iprot.readString();
        struct.setValue1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.column2 = iprot.readString();
        struct.setColumn2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.value2 = iprot.readString();
        struct.setValue2IsSet(true);
      }
    }
  }

}

