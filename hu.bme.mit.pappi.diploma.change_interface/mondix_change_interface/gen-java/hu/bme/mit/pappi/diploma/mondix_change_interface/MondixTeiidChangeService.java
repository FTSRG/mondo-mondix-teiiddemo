/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.bme.mit.pappi.diploma.mondix_change_interface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MondixTeiidChangeService {

  public interface Iface {

    public int performBinaryInsert(BinaryTuple tuple) throws org.apache.thrift.TException;

    public int performBinaryDelete(BinaryTuple tuple) throws org.apache.thrift.TException;

    public int performBinaryUpdate(BinaryTuple oldTuple, BinaryTuple newTuple) throws org.apache.thrift.TException;

    public int performUnaryInsert(UnaryTuple tuple) throws org.apache.thrift.TException;

    public int performUnaryDelete(UnaryTuple tuple) throws org.apache.thrift.TException;

    public int performUnaryUpdate(UnaryTuple oldTuple, UnaryTuple newTuple) throws org.apache.thrift.TException;

    public long getMatchesCount(String query) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void performBinaryInsert(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performBinaryDelete(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performBinaryUpdate(BinaryTuple oldTuple, BinaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryInsert(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryDelete(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryUpdate(UnaryTuple oldTuple, UnaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchesCount(String query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int performBinaryInsert(BinaryTuple tuple) throws org.apache.thrift.TException
    {
      send_performBinaryInsert(tuple);
      return recv_performBinaryInsert();
    }

    public void send_performBinaryInsert(BinaryTuple tuple) throws org.apache.thrift.TException
    {
      performBinaryInsert_args args = new performBinaryInsert_args();
      args.setTuple(tuple);
      sendBase("performBinaryInsert", args);
    }

    public int recv_performBinaryInsert() throws org.apache.thrift.TException
    {
      performBinaryInsert_result result = new performBinaryInsert_result();
      receiveBase(result, "performBinaryInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryInsert failed: unknown result");
    }

    public int performBinaryDelete(BinaryTuple tuple) throws org.apache.thrift.TException
    {
      send_performBinaryDelete(tuple);
      return recv_performBinaryDelete();
    }

    public void send_performBinaryDelete(BinaryTuple tuple) throws org.apache.thrift.TException
    {
      performBinaryDelete_args args = new performBinaryDelete_args();
      args.setTuple(tuple);
      sendBase("performBinaryDelete", args);
    }

    public int recv_performBinaryDelete() throws org.apache.thrift.TException
    {
      performBinaryDelete_result result = new performBinaryDelete_result();
      receiveBase(result, "performBinaryDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryDelete failed: unknown result");
    }

    public int performBinaryUpdate(BinaryTuple oldTuple, BinaryTuple newTuple) throws org.apache.thrift.TException
    {
      send_performBinaryUpdate(oldTuple, newTuple);
      return recv_performBinaryUpdate();
    }

    public void send_performBinaryUpdate(BinaryTuple oldTuple, BinaryTuple newTuple) throws org.apache.thrift.TException
    {
      performBinaryUpdate_args args = new performBinaryUpdate_args();
      args.setOldTuple(oldTuple);
      args.setNewTuple(newTuple);
      sendBase("performBinaryUpdate", args);
    }

    public int recv_performBinaryUpdate() throws org.apache.thrift.TException
    {
      performBinaryUpdate_result result = new performBinaryUpdate_result();
      receiveBase(result, "performBinaryUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryUpdate failed: unknown result");
    }

    public int performUnaryInsert(UnaryTuple tuple) throws org.apache.thrift.TException
    {
      send_performUnaryInsert(tuple);
      return recv_performUnaryInsert();
    }

    public void send_performUnaryInsert(UnaryTuple tuple) throws org.apache.thrift.TException
    {
      performUnaryInsert_args args = new performUnaryInsert_args();
      args.setTuple(tuple);
      sendBase("performUnaryInsert", args);
    }

    public int recv_performUnaryInsert() throws org.apache.thrift.TException
    {
      performUnaryInsert_result result = new performUnaryInsert_result();
      receiveBase(result, "performUnaryInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryInsert failed: unknown result");
    }

    public int performUnaryDelete(UnaryTuple tuple) throws org.apache.thrift.TException
    {
      send_performUnaryDelete(tuple);
      return recv_performUnaryDelete();
    }

    public void send_performUnaryDelete(UnaryTuple tuple) throws org.apache.thrift.TException
    {
      performUnaryDelete_args args = new performUnaryDelete_args();
      args.setTuple(tuple);
      sendBase("performUnaryDelete", args);
    }

    public int recv_performUnaryDelete() throws org.apache.thrift.TException
    {
      performUnaryDelete_result result = new performUnaryDelete_result();
      receiveBase(result, "performUnaryDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryDelete failed: unknown result");
    }

    public int performUnaryUpdate(UnaryTuple oldTuple, UnaryTuple newTuple) throws org.apache.thrift.TException
    {
      send_performUnaryUpdate(oldTuple, newTuple);
      return recv_performUnaryUpdate();
    }

    public void send_performUnaryUpdate(UnaryTuple oldTuple, UnaryTuple newTuple) throws org.apache.thrift.TException
    {
      performUnaryUpdate_args args = new performUnaryUpdate_args();
      args.setOldTuple(oldTuple);
      args.setNewTuple(newTuple);
      sendBase("performUnaryUpdate", args);
    }

    public int recv_performUnaryUpdate() throws org.apache.thrift.TException
    {
      performUnaryUpdate_result result = new performUnaryUpdate_result();
      receiveBase(result, "performUnaryUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryUpdate failed: unknown result");
    }

    public long getMatchesCount(String query) throws org.apache.thrift.TException
    {
      send_getMatchesCount(query);
      return recv_getMatchesCount();
    }

    public void send_getMatchesCount(String query) throws org.apache.thrift.TException
    {
      getMatchesCount_args args = new getMatchesCount_args();
      args.setQuery(query);
      sendBase("getMatchesCount", args);
    }

    public long recv_getMatchesCount() throws org.apache.thrift.TException
    {
      getMatchesCount_result result = new getMatchesCount_result();
      receiveBase(result, "getMatchesCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchesCount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void performBinaryInsert(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryInsert_call method_call = new performBinaryInsert_call(tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BinaryTuple tuple;
      public performBinaryInsert_call(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryInsert_args args = new performBinaryInsert_args();
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryInsert();
      }
    }

    public void performBinaryDelete(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryDelete_call method_call = new performBinaryDelete_call(tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BinaryTuple tuple;
      public performBinaryDelete_call(BinaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryDelete_args args = new performBinaryDelete_args();
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryDelete();
      }
    }

    public void performBinaryUpdate(BinaryTuple oldTuple, BinaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryUpdate_call method_call = new performBinaryUpdate_call(oldTuple, newTuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BinaryTuple oldTuple;
      private BinaryTuple newTuple;
      public performBinaryUpdate_call(BinaryTuple oldTuple, BinaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldTuple = oldTuple;
        this.newTuple = newTuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryUpdate_args args = new performBinaryUpdate_args();
        args.setOldTuple(oldTuple);
        args.setNewTuple(newTuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryUpdate();
      }
    }

    public void performUnaryInsert(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryInsert_call method_call = new performUnaryInsert_call(tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnaryTuple tuple;
      public performUnaryInsert_call(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryInsert_args args = new performUnaryInsert_args();
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryInsert();
      }
    }

    public void performUnaryDelete(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryDelete_call method_call = new performUnaryDelete_call(tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnaryTuple tuple;
      public performUnaryDelete_call(UnaryTuple tuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryDelete_args args = new performUnaryDelete_args();
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryDelete();
      }
    }

    public void performUnaryUpdate(UnaryTuple oldTuple, UnaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryUpdate_call method_call = new performUnaryUpdate_call(oldTuple, newTuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnaryTuple oldTuple;
      private UnaryTuple newTuple;
      public performUnaryUpdate_call(UnaryTuple oldTuple, UnaryTuple newTuple, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldTuple = oldTuple;
        this.newTuple = newTuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryUpdate_args args = new performUnaryUpdate_args();
        args.setOldTuple(oldTuple);
        args.setNewTuple(newTuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryUpdate();
      }
    }

    public void getMatchesCount(String query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchesCount_call method_call = new getMatchesCount_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchesCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String query;
      public getMatchesCount_call(String query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchesCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchesCount_args args = new getMatchesCount_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchesCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("performBinaryInsert", new performBinaryInsert());
      processMap.put("performBinaryDelete", new performBinaryDelete());
      processMap.put("performBinaryUpdate", new performBinaryUpdate());
      processMap.put("performUnaryInsert", new performUnaryInsert());
      processMap.put("performUnaryDelete", new performUnaryDelete());
      processMap.put("performUnaryUpdate", new performUnaryUpdate());
      processMap.put("getMatchesCount", new getMatchesCount());
      return processMap;
    }

    public static class performBinaryInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryInsert_args> {
      public performBinaryInsert() {
        super("performBinaryInsert");
      }

      public performBinaryInsert_args getEmptyArgsInstance() {
        return new performBinaryInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryInsert_result getResult(I iface, performBinaryInsert_args args) throws org.apache.thrift.TException {
        performBinaryInsert_result result = new performBinaryInsert_result();
        result.success = iface.performBinaryInsert(args.tuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performBinaryDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryDelete_args> {
      public performBinaryDelete() {
        super("performBinaryDelete");
      }

      public performBinaryDelete_args getEmptyArgsInstance() {
        return new performBinaryDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryDelete_result getResult(I iface, performBinaryDelete_args args) throws org.apache.thrift.TException {
        performBinaryDelete_result result = new performBinaryDelete_result();
        result.success = iface.performBinaryDelete(args.tuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performBinaryUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryUpdate_args> {
      public performBinaryUpdate() {
        super("performBinaryUpdate");
      }

      public performBinaryUpdate_args getEmptyArgsInstance() {
        return new performBinaryUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryUpdate_result getResult(I iface, performBinaryUpdate_args args) throws org.apache.thrift.TException {
        performBinaryUpdate_result result = new performBinaryUpdate_result();
        result.success = iface.performBinaryUpdate(args.oldTuple, args.newTuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryInsert_args> {
      public performUnaryInsert() {
        super("performUnaryInsert");
      }

      public performUnaryInsert_args getEmptyArgsInstance() {
        return new performUnaryInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryInsert_result getResult(I iface, performUnaryInsert_args args) throws org.apache.thrift.TException {
        performUnaryInsert_result result = new performUnaryInsert_result();
        result.success = iface.performUnaryInsert(args.tuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryDelete_args> {
      public performUnaryDelete() {
        super("performUnaryDelete");
      }

      public performUnaryDelete_args getEmptyArgsInstance() {
        return new performUnaryDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryDelete_result getResult(I iface, performUnaryDelete_args args) throws org.apache.thrift.TException {
        performUnaryDelete_result result = new performUnaryDelete_result();
        result.success = iface.performUnaryDelete(args.tuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryUpdate_args> {
      public performUnaryUpdate() {
        super("performUnaryUpdate");
      }

      public performUnaryUpdate_args getEmptyArgsInstance() {
        return new performUnaryUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryUpdate_result getResult(I iface, performUnaryUpdate_args args) throws org.apache.thrift.TException {
        performUnaryUpdate_result result = new performUnaryUpdate_result();
        result.success = iface.performUnaryUpdate(args.oldTuple, args.newTuple);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMatchesCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchesCount_args> {
      public getMatchesCount() {
        super("getMatchesCount");
      }

      public getMatchesCount_args getEmptyArgsInstance() {
        return new getMatchesCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchesCount_result getResult(I iface, getMatchesCount_args args) throws org.apache.thrift.TException {
        getMatchesCount_result result = new getMatchesCount_result();
        result.success = iface.getMatchesCount(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("performBinaryInsert", new performBinaryInsert());
      processMap.put("performBinaryDelete", new performBinaryDelete());
      processMap.put("performBinaryUpdate", new performBinaryUpdate());
      processMap.put("performUnaryInsert", new performUnaryInsert());
      processMap.put("performUnaryDelete", new performUnaryDelete());
      processMap.put("performUnaryUpdate", new performUnaryUpdate());
      processMap.put("getMatchesCount", new getMatchesCount());
      return processMap;
    }

    public static class performBinaryInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryInsert_args, Integer> {
      public performBinaryInsert() {
        super("performBinaryInsert");
      }

      public performBinaryInsert_args getEmptyArgsInstance() {
        return new performBinaryInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryInsert_result result = new performBinaryInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryInsert_result result = new performBinaryInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryInsert(args.tuple,resultHandler);
      }
    }

    public static class performBinaryDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryDelete_args, Integer> {
      public performBinaryDelete() {
        super("performBinaryDelete");
      }

      public performBinaryDelete_args getEmptyArgsInstance() {
        return new performBinaryDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryDelete_result result = new performBinaryDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryDelete_result result = new performBinaryDelete_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryDelete(args.tuple,resultHandler);
      }
    }

    public static class performBinaryUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryUpdate_args, Integer> {
      public performBinaryUpdate() {
        super("performBinaryUpdate");
      }

      public performBinaryUpdate_args getEmptyArgsInstance() {
        return new performBinaryUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryUpdate_result result = new performBinaryUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryUpdate_result result = new performBinaryUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryUpdate(args.oldTuple, args.newTuple,resultHandler);
      }
    }

    public static class performUnaryInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryInsert_args, Integer> {
      public performUnaryInsert() {
        super("performUnaryInsert");
      }

      public performUnaryInsert_args getEmptyArgsInstance() {
        return new performUnaryInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryInsert_result result = new performUnaryInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryInsert_result result = new performUnaryInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryInsert(args.tuple,resultHandler);
      }
    }

    public static class performUnaryDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryDelete_args, Integer> {
      public performUnaryDelete() {
        super("performUnaryDelete");
      }

      public performUnaryDelete_args getEmptyArgsInstance() {
        return new performUnaryDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryDelete_result result = new performUnaryDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryDelete_result result = new performUnaryDelete_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryDelete(args.tuple,resultHandler);
      }
    }

    public static class performUnaryUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryUpdate_args, Integer> {
      public performUnaryUpdate() {
        super("performUnaryUpdate");
      }

      public performUnaryUpdate_args getEmptyArgsInstance() {
        return new performUnaryUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryUpdate_result result = new performUnaryUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryUpdate_result result = new performUnaryUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryUpdate(args.oldTuple, args.newTuple,resultHandler);
      }
    }

    public static class getMatchesCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchesCount_args, Long> {
      public getMatchesCount() {
        super("getMatchesCount");
      }

      public getMatchesCount_args getEmptyArgsInstance() {
        return new getMatchesCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getMatchesCount_result result = new getMatchesCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchesCount_result result = new getMatchesCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchesCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getMatchesCount(args.query,resultHandler);
      }
    }

  }

  public static class performBinaryInsert_args implements org.apache.thrift.TBase<performBinaryInsert_args, performBinaryInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryInsert_args");

    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryInsert_argsTupleSchemeFactory());
    }

    public BinaryTuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TUPLE((short)1, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryInsert_args.class, metaDataMap);
    }

    public performBinaryInsert_args() {
    }

    public performBinaryInsert_args(
      BinaryTuple tuple)
    {
      this();
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryInsert_args(performBinaryInsert_args other) {
      if (other.isSetTuple()) {
        this.tuple = new BinaryTuple(other.tuple);
      }
    }

    public performBinaryInsert_args deepCopy() {
      return new performBinaryInsert_args(this);
    }

    @Override
    public void clear() {
      this.tuple = null;
    }

    public BinaryTuple getTuple() {
      return this.tuple;
    }

    public performBinaryInsert_args setTuple(BinaryTuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((BinaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryInsert_args)
        return this.equals((performBinaryInsert_args)that);
      return false;
    }

    public boolean equals(performBinaryInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryInsert_args(");
      boolean first = true;

      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryInsert_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryInsert_argsStandardScheme getScheme() {
        return new performBinaryInsert_argsStandardScheme();
      }
    }

    private static class performBinaryInsert_argsStandardScheme extends StandardScheme<performBinaryInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new BinaryTuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryInsert_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryInsert_argsTupleScheme getScheme() {
        return new performBinaryInsert_argsTupleScheme();
      }
    }

    private static class performBinaryInsert_argsTupleScheme extends TupleScheme<performBinaryInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTuple()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tuple = new BinaryTuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class performBinaryInsert_result implements org.apache.thrift.TBase<performBinaryInsert_result, performBinaryInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryInsert_result.class, metaDataMap);
    }

    public performBinaryInsert_result() {
    }

    public performBinaryInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryInsert_result(performBinaryInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryInsert_result deepCopy() {
      return new performBinaryInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryInsert_result)
        return this.equals((performBinaryInsert_result)that);
      return false;
    }

    public boolean equals(performBinaryInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryInsert_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryInsert_resultStandardScheme getScheme() {
        return new performBinaryInsert_resultStandardScheme();
      }
    }

    private static class performBinaryInsert_resultStandardScheme extends StandardScheme<performBinaryInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryInsert_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryInsert_resultTupleScheme getScheme() {
        return new performBinaryInsert_resultTupleScheme();
      }
    }

    private static class performBinaryInsert_resultTupleScheme extends TupleScheme<performBinaryInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performBinaryDelete_args implements org.apache.thrift.TBase<performBinaryDelete_args, performBinaryDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryDelete_args");

    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryDelete_argsTupleSchemeFactory());
    }

    public BinaryTuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TUPLE((short)1, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryDelete_args.class, metaDataMap);
    }

    public performBinaryDelete_args() {
    }

    public performBinaryDelete_args(
      BinaryTuple tuple)
    {
      this();
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryDelete_args(performBinaryDelete_args other) {
      if (other.isSetTuple()) {
        this.tuple = new BinaryTuple(other.tuple);
      }
    }

    public performBinaryDelete_args deepCopy() {
      return new performBinaryDelete_args(this);
    }

    @Override
    public void clear() {
      this.tuple = null;
    }

    public BinaryTuple getTuple() {
      return this.tuple;
    }

    public performBinaryDelete_args setTuple(BinaryTuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((BinaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryDelete_args)
        return this.equals((performBinaryDelete_args)that);
      return false;
    }

    public boolean equals(performBinaryDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryDelete_args(");
      boolean first = true;

      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryDelete_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryDelete_argsStandardScheme getScheme() {
        return new performBinaryDelete_argsStandardScheme();
      }
    }

    private static class performBinaryDelete_argsStandardScheme extends StandardScheme<performBinaryDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new BinaryTuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryDelete_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryDelete_argsTupleScheme getScheme() {
        return new performBinaryDelete_argsTupleScheme();
      }
    }

    private static class performBinaryDelete_argsTupleScheme extends TupleScheme<performBinaryDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTuple()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tuple = new BinaryTuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class performBinaryDelete_result implements org.apache.thrift.TBase<performBinaryDelete_result, performBinaryDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryDelete_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryDelete_result.class, metaDataMap);
    }

    public performBinaryDelete_result() {
    }

    public performBinaryDelete_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryDelete_result(performBinaryDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryDelete_result deepCopy() {
      return new performBinaryDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryDelete_result)
        return this.equals((performBinaryDelete_result)that);
      return false;
    }

    public boolean equals(performBinaryDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryDelete_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryDelete_resultStandardScheme getScheme() {
        return new performBinaryDelete_resultStandardScheme();
      }
    }

    private static class performBinaryDelete_resultStandardScheme extends StandardScheme<performBinaryDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryDelete_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryDelete_resultTupleScheme getScheme() {
        return new performBinaryDelete_resultTupleScheme();
      }
    }

    private static class performBinaryDelete_resultTupleScheme extends TupleScheme<performBinaryDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performBinaryUpdate_args implements org.apache.thrift.TBase<performBinaryUpdate_args, performBinaryUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryUpdate_args");

    private static final org.apache.thrift.protocol.TField OLD_TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("newTuple", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryUpdate_argsTupleSchemeFactory());
    }

    public BinaryTuple oldTuple; // required
    public BinaryTuple newTuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_TUPLE((short)1, "oldTuple"),
      NEW_TUPLE((short)2, "newTuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_TUPLE
            return OLD_TUPLE;
          case 2: // NEW_TUPLE
            return NEW_TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_TUPLE, new org.apache.thrift.meta_data.FieldMetaData("oldTuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryTuple.class)));
      tmpMap.put(_Fields.NEW_TUPLE, new org.apache.thrift.meta_data.FieldMetaData("newTuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryUpdate_args.class, metaDataMap);
    }

    public performBinaryUpdate_args() {
    }

    public performBinaryUpdate_args(
      BinaryTuple oldTuple,
      BinaryTuple newTuple)
    {
      this();
      this.oldTuple = oldTuple;
      this.newTuple = newTuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryUpdate_args(performBinaryUpdate_args other) {
      if (other.isSetOldTuple()) {
        this.oldTuple = new BinaryTuple(other.oldTuple);
      }
      if (other.isSetNewTuple()) {
        this.newTuple = new BinaryTuple(other.newTuple);
      }
    }

    public performBinaryUpdate_args deepCopy() {
      return new performBinaryUpdate_args(this);
    }

    @Override
    public void clear() {
      this.oldTuple = null;
      this.newTuple = null;
    }

    public BinaryTuple getOldTuple() {
      return this.oldTuple;
    }

    public performBinaryUpdate_args setOldTuple(BinaryTuple oldTuple) {
      this.oldTuple = oldTuple;
      return this;
    }

    public void unsetOldTuple() {
      this.oldTuple = null;
    }

    /** Returns true if field oldTuple is set (has been assigned a value) and false otherwise */
    public boolean isSetOldTuple() {
      return this.oldTuple != null;
    }

    public void setOldTupleIsSet(boolean value) {
      if (!value) {
        this.oldTuple = null;
      }
    }

    public BinaryTuple getNewTuple() {
      return this.newTuple;
    }

    public performBinaryUpdate_args setNewTuple(BinaryTuple newTuple) {
      this.newTuple = newTuple;
      return this;
    }

    public void unsetNewTuple() {
      this.newTuple = null;
    }

    /** Returns true if field newTuple is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTuple() {
      return this.newTuple != null;
    }

    public void setNewTupleIsSet(boolean value) {
      if (!value) {
        this.newTuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_TUPLE:
        if (value == null) {
          unsetOldTuple();
        } else {
          setOldTuple((BinaryTuple)value);
        }
        break;

      case NEW_TUPLE:
        if (value == null) {
          unsetNewTuple();
        } else {
          setNewTuple((BinaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_TUPLE:
        return getOldTuple();

      case NEW_TUPLE:
        return getNewTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_TUPLE:
        return isSetOldTuple();
      case NEW_TUPLE:
        return isSetNewTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryUpdate_args)
        return this.equals((performBinaryUpdate_args)that);
      return false;
    }

    public boolean equals(performBinaryUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_oldTuple = true && this.isSetOldTuple();
      boolean that_present_oldTuple = true && that.isSetOldTuple();
      if (this_present_oldTuple || that_present_oldTuple) {
        if (!(this_present_oldTuple && that_present_oldTuple))
          return false;
        if (!this.oldTuple.equals(that.oldTuple))
          return false;
      }

      boolean this_present_newTuple = true && this.isSetNewTuple();
      boolean that_present_newTuple = true && that.isSetNewTuple();
      if (this_present_newTuple || that_present_newTuple) {
        if (!(this_present_newTuple && that_present_newTuple))
          return false;
        if (!this.newTuple.equals(that.newTuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldTuple()).compareTo(other.isSetOldTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTuple, other.oldTuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTuple()).compareTo(other.isSetNewTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTuple, other.newTuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryUpdate_args(");
      boolean first = true;

      sb.append("oldTuple:");
      if (this.oldTuple == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTuple);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newTuple:");
      if (this.newTuple == null) {
        sb.append("null");
      } else {
        sb.append(this.newTuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oldTuple != null) {
        oldTuple.validate();
      }
      if (newTuple != null) {
        newTuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_argsStandardScheme getScheme() {
        return new performBinaryUpdate_argsStandardScheme();
      }
    }

    private static class performBinaryUpdate_argsStandardScheme extends StandardScheme<performBinaryUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldTuple = new BinaryTuple();
                struct.oldTuple.read(iprot);
                struct.setOldTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newTuple = new BinaryTuple();
                struct.newTuple.read(iprot);
                struct.setNewTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldTuple != null) {
          oprot.writeFieldBegin(OLD_TUPLE_FIELD_DESC);
          struct.oldTuple.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newTuple != null) {
          oprot.writeFieldBegin(NEW_TUPLE_FIELD_DESC);
          struct.newTuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_argsTupleScheme getScheme() {
        return new performBinaryUpdate_argsTupleScheme();
      }
    }

    private static class performBinaryUpdate_argsTupleScheme extends TupleScheme<performBinaryUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldTuple()) {
          optionals.set(0);
        }
        if (struct.isSetNewTuple()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldTuple()) {
          struct.oldTuple.write(oprot);
        }
        if (struct.isSetNewTuple()) {
          struct.newTuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldTuple = new BinaryTuple();
          struct.oldTuple.read(iprot);
          struct.setOldTupleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newTuple = new BinaryTuple();
          struct.newTuple.read(iprot);
          struct.setNewTupleIsSet(true);
        }
      }
    }

  }

  public static class performBinaryUpdate_result implements org.apache.thrift.TBase<performBinaryUpdate_result, performBinaryUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryUpdate_result.class, metaDataMap);
    }

    public performBinaryUpdate_result() {
    }

    public performBinaryUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryUpdate_result(performBinaryUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryUpdate_result deepCopy() {
      return new performBinaryUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryUpdate_result)
        return this.equals((performBinaryUpdate_result)that);
      return false;
    }

    public boolean equals(performBinaryUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_resultStandardScheme getScheme() {
        return new performBinaryUpdate_resultStandardScheme();
      }
    }

    private static class performBinaryUpdate_resultStandardScheme extends StandardScheme<performBinaryUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_resultTupleScheme getScheme() {
        return new performBinaryUpdate_resultTupleScheme();
      }
    }

    private static class performBinaryUpdate_resultTupleScheme extends TupleScheme<performBinaryUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryInsert_args implements org.apache.thrift.TBase<performUnaryInsert_args, performUnaryInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryInsert_args");

    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryInsert_argsTupleSchemeFactory());
    }

    public UnaryTuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TUPLE((short)1, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryInsert_args.class, metaDataMap);
    }

    public performUnaryInsert_args() {
    }

    public performUnaryInsert_args(
      UnaryTuple tuple)
    {
      this();
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryInsert_args(performUnaryInsert_args other) {
      if (other.isSetTuple()) {
        this.tuple = new UnaryTuple(other.tuple);
      }
    }

    public performUnaryInsert_args deepCopy() {
      return new performUnaryInsert_args(this);
    }

    @Override
    public void clear() {
      this.tuple = null;
    }

    public UnaryTuple getTuple() {
      return this.tuple;
    }

    public performUnaryInsert_args setTuple(UnaryTuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((UnaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryInsert_args)
        return this.equals((performUnaryInsert_args)that);
      return false;
    }

    public boolean equals(performUnaryInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryInsert_args(");
      boolean first = true;

      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryInsert_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryInsert_argsStandardScheme getScheme() {
        return new performUnaryInsert_argsStandardScheme();
      }
    }

    private static class performUnaryInsert_argsStandardScheme extends StandardScheme<performUnaryInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new UnaryTuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryInsert_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryInsert_argsTupleScheme getScheme() {
        return new performUnaryInsert_argsTupleScheme();
      }
    }

    private static class performUnaryInsert_argsTupleScheme extends TupleScheme<performUnaryInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTuple()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tuple = new UnaryTuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class performUnaryInsert_result implements org.apache.thrift.TBase<performUnaryInsert_result, performUnaryInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryInsert_result.class, metaDataMap);
    }

    public performUnaryInsert_result() {
    }

    public performUnaryInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryInsert_result(performUnaryInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryInsert_result deepCopy() {
      return new performUnaryInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryInsert_result)
        return this.equals((performUnaryInsert_result)that);
      return false;
    }

    public boolean equals(performUnaryInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryInsert_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryInsert_resultStandardScheme getScheme() {
        return new performUnaryInsert_resultStandardScheme();
      }
    }

    private static class performUnaryInsert_resultStandardScheme extends StandardScheme<performUnaryInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryInsert_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryInsert_resultTupleScheme getScheme() {
        return new performUnaryInsert_resultTupleScheme();
      }
    }

    private static class performUnaryInsert_resultTupleScheme extends TupleScheme<performUnaryInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryDelete_args implements org.apache.thrift.TBase<performUnaryDelete_args, performUnaryDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryDelete_args");

    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryDelete_argsTupleSchemeFactory());
    }

    public UnaryTuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TUPLE((short)1, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryDelete_args.class, metaDataMap);
    }

    public performUnaryDelete_args() {
    }

    public performUnaryDelete_args(
      UnaryTuple tuple)
    {
      this();
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryDelete_args(performUnaryDelete_args other) {
      if (other.isSetTuple()) {
        this.tuple = new UnaryTuple(other.tuple);
      }
    }

    public performUnaryDelete_args deepCopy() {
      return new performUnaryDelete_args(this);
    }

    @Override
    public void clear() {
      this.tuple = null;
    }

    public UnaryTuple getTuple() {
      return this.tuple;
    }

    public performUnaryDelete_args setTuple(UnaryTuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((UnaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryDelete_args)
        return this.equals((performUnaryDelete_args)that);
      return false;
    }

    public boolean equals(performUnaryDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryDelete_args(");
      boolean first = true;

      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryDelete_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryDelete_argsStandardScheme getScheme() {
        return new performUnaryDelete_argsStandardScheme();
      }
    }

    private static class performUnaryDelete_argsStandardScheme extends StandardScheme<performUnaryDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new UnaryTuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryDelete_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryDelete_argsTupleScheme getScheme() {
        return new performUnaryDelete_argsTupleScheme();
      }
    }

    private static class performUnaryDelete_argsTupleScheme extends TupleScheme<performUnaryDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTuple()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tuple = new UnaryTuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class performUnaryDelete_result implements org.apache.thrift.TBase<performUnaryDelete_result, performUnaryDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryDelete_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryDelete_result.class, metaDataMap);
    }

    public performUnaryDelete_result() {
    }

    public performUnaryDelete_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryDelete_result(performUnaryDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryDelete_result deepCopy() {
      return new performUnaryDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryDelete_result)
        return this.equals((performUnaryDelete_result)that);
      return false;
    }

    public boolean equals(performUnaryDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryDelete_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryDelete_resultStandardScheme getScheme() {
        return new performUnaryDelete_resultStandardScheme();
      }
    }

    private static class performUnaryDelete_resultStandardScheme extends StandardScheme<performUnaryDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryDelete_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryDelete_resultTupleScheme getScheme() {
        return new performUnaryDelete_resultTupleScheme();
      }
    }

    private static class performUnaryDelete_resultTupleScheme extends TupleScheme<performUnaryDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryUpdate_args implements org.apache.thrift.TBase<performUnaryUpdate_args, performUnaryUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryUpdate_args");

    private static final org.apache.thrift.protocol.TField OLD_TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTuple", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("newTuple", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryUpdate_argsTupleSchemeFactory());
    }

    public UnaryTuple oldTuple; // required
    public UnaryTuple newTuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_TUPLE((short)1, "oldTuple"),
      NEW_TUPLE((short)2, "newTuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_TUPLE
            return OLD_TUPLE;
          case 2: // NEW_TUPLE
            return NEW_TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_TUPLE, new org.apache.thrift.meta_data.FieldMetaData("oldTuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnaryTuple.class)));
      tmpMap.put(_Fields.NEW_TUPLE, new org.apache.thrift.meta_data.FieldMetaData("newTuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnaryTuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryUpdate_args.class, metaDataMap);
    }

    public performUnaryUpdate_args() {
    }

    public performUnaryUpdate_args(
      UnaryTuple oldTuple,
      UnaryTuple newTuple)
    {
      this();
      this.oldTuple = oldTuple;
      this.newTuple = newTuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryUpdate_args(performUnaryUpdate_args other) {
      if (other.isSetOldTuple()) {
        this.oldTuple = new UnaryTuple(other.oldTuple);
      }
      if (other.isSetNewTuple()) {
        this.newTuple = new UnaryTuple(other.newTuple);
      }
    }

    public performUnaryUpdate_args deepCopy() {
      return new performUnaryUpdate_args(this);
    }

    @Override
    public void clear() {
      this.oldTuple = null;
      this.newTuple = null;
    }

    public UnaryTuple getOldTuple() {
      return this.oldTuple;
    }

    public performUnaryUpdate_args setOldTuple(UnaryTuple oldTuple) {
      this.oldTuple = oldTuple;
      return this;
    }

    public void unsetOldTuple() {
      this.oldTuple = null;
    }

    /** Returns true if field oldTuple is set (has been assigned a value) and false otherwise */
    public boolean isSetOldTuple() {
      return this.oldTuple != null;
    }

    public void setOldTupleIsSet(boolean value) {
      if (!value) {
        this.oldTuple = null;
      }
    }

    public UnaryTuple getNewTuple() {
      return this.newTuple;
    }

    public performUnaryUpdate_args setNewTuple(UnaryTuple newTuple) {
      this.newTuple = newTuple;
      return this;
    }

    public void unsetNewTuple() {
      this.newTuple = null;
    }

    /** Returns true if field newTuple is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTuple() {
      return this.newTuple != null;
    }

    public void setNewTupleIsSet(boolean value) {
      if (!value) {
        this.newTuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_TUPLE:
        if (value == null) {
          unsetOldTuple();
        } else {
          setOldTuple((UnaryTuple)value);
        }
        break;

      case NEW_TUPLE:
        if (value == null) {
          unsetNewTuple();
        } else {
          setNewTuple((UnaryTuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_TUPLE:
        return getOldTuple();

      case NEW_TUPLE:
        return getNewTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_TUPLE:
        return isSetOldTuple();
      case NEW_TUPLE:
        return isSetNewTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryUpdate_args)
        return this.equals((performUnaryUpdate_args)that);
      return false;
    }

    public boolean equals(performUnaryUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_oldTuple = true && this.isSetOldTuple();
      boolean that_present_oldTuple = true && that.isSetOldTuple();
      if (this_present_oldTuple || that_present_oldTuple) {
        if (!(this_present_oldTuple && that_present_oldTuple))
          return false;
        if (!this.oldTuple.equals(that.oldTuple))
          return false;
      }

      boolean this_present_newTuple = true && this.isSetNewTuple();
      boolean that_present_newTuple = true && that.isSetNewTuple();
      if (this_present_newTuple || that_present_newTuple) {
        if (!(this_present_newTuple && that_present_newTuple))
          return false;
        if (!this.newTuple.equals(that.newTuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldTuple()).compareTo(other.isSetOldTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTuple, other.oldTuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTuple()).compareTo(other.isSetNewTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTuple, other.newTuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryUpdate_args(");
      boolean first = true;

      sb.append("oldTuple:");
      if (this.oldTuple == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTuple);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newTuple:");
      if (this.newTuple == null) {
        sb.append("null");
      } else {
        sb.append(this.newTuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oldTuple != null) {
        oldTuple.validate();
      }
      if (newTuple != null) {
        newTuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_argsStandardScheme getScheme() {
        return new performUnaryUpdate_argsStandardScheme();
      }
    }

    private static class performUnaryUpdate_argsStandardScheme extends StandardScheme<performUnaryUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldTuple = new UnaryTuple();
                struct.oldTuple.read(iprot);
                struct.setOldTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newTuple = new UnaryTuple();
                struct.newTuple.read(iprot);
                struct.setNewTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldTuple != null) {
          oprot.writeFieldBegin(OLD_TUPLE_FIELD_DESC);
          struct.oldTuple.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newTuple != null) {
          oprot.writeFieldBegin(NEW_TUPLE_FIELD_DESC);
          struct.newTuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_argsTupleScheme getScheme() {
        return new performUnaryUpdate_argsTupleScheme();
      }
    }

    private static class performUnaryUpdate_argsTupleScheme extends TupleScheme<performUnaryUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldTuple()) {
          optionals.set(0);
        }
        if (struct.isSetNewTuple()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldTuple()) {
          struct.oldTuple.write(oprot);
        }
        if (struct.isSetNewTuple()) {
          struct.newTuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldTuple = new UnaryTuple();
          struct.oldTuple.read(iprot);
          struct.setOldTupleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newTuple = new UnaryTuple();
          struct.newTuple.read(iprot);
          struct.setNewTupleIsSet(true);
        }
      }
    }

  }

  public static class performUnaryUpdate_result implements org.apache.thrift.TBase<performUnaryUpdate_result, performUnaryUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryUpdate_result.class, metaDataMap);
    }

    public performUnaryUpdate_result() {
    }

    public performUnaryUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryUpdate_result(performUnaryUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryUpdate_result deepCopy() {
      return new performUnaryUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryUpdate_result)
        return this.equals((performUnaryUpdate_result)that);
      return false;
    }

    public boolean equals(performUnaryUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_resultStandardScheme getScheme() {
        return new performUnaryUpdate_resultStandardScheme();
      }
    }

    private static class performUnaryUpdate_resultStandardScheme extends StandardScheme<performUnaryUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_resultTupleScheme getScheme() {
        return new performUnaryUpdate_resultTupleScheme();
      }
    }

    private static class performUnaryUpdate_resultTupleScheme extends TupleScheme<performUnaryUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchesCount_args implements org.apache.thrift.TBase<getMatchesCount_args, getMatchesCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchesCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchesCount_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchesCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchesCount_argsTupleSchemeFactory());
    }

    public String query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchesCount_args.class, metaDataMap);
    }

    public getMatchesCount_args() {
    }

    public getMatchesCount_args(
      String query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchesCount_args(getMatchesCount_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public getMatchesCount_args deepCopy() {
      return new getMatchesCount_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public String getQuery() {
      return this.query;
    }

    public getMatchesCount_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchesCount_args)
        return this.equals((getMatchesCount_args)that);
      return false;
    }

    public boolean equals(getMatchesCount_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchesCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchesCount_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchesCount_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchesCount_argsStandardScheme getScheme() {
        return new getMatchesCount_argsStandardScheme();
      }
    }

    private static class getMatchesCount_argsStandardScheme extends StandardScheme<getMatchesCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchesCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchesCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchesCount_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchesCount_argsTupleScheme getScheme() {
        return new getMatchesCount_argsTupleScheme();
      }
    }

    private static class getMatchesCount_argsTupleScheme extends TupleScheme<getMatchesCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchesCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchesCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getMatchesCount_result implements org.apache.thrift.TBase<getMatchesCount_result, getMatchesCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchesCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchesCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchesCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchesCount_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchesCount_result.class, metaDataMap);
    }

    public getMatchesCount_result() {
    }

    public getMatchesCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchesCount_result(getMatchesCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMatchesCount_result deepCopy() {
      return new getMatchesCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getMatchesCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchesCount_result)
        return this.equals((getMatchesCount_result)that);
      return false;
    }

    public boolean equals(getMatchesCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchesCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchesCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchesCount_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchesCount_resultStandardScheme getScheme() {
        return new getMatchesCount_resultStandardScheme();
      }
    }

    private static class getMatchesCount_resultStandardScheme extends StandardScheme<getMatchesCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchesCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchesCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchesCount_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchesCount_resultTupleScheme getScheme() {
        return new getMatchesCount_resultTupleScheme();
      }
    }

    private static class getMatchesCount_resultTupleScheme extends TupleScheme<getMatchesCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchesCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchesCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
