/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hu.bme.mit.pappi.diploma.mondix_change_interface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MondixTeiidChangeService {

  public interface Iface {

    public int performBinaryInsert(String relationName, String column1, String column2) throws org.apache.thrift.TException;

    public int performBinaryDelete(String relationName, String column1, String column2) throws org.apache.thrift.TException;

    public int performBinaryUpdate(String relationName, String old_column1, String old_column2, String new_column1, String new_column2) throws org.apache.thrift.TException;

    public int performUnaryInsert(String relationName, String column1) throws org.apache.thrift.TException;

    public int performUnaryDelete(String relationName, String column1) throws org.apache.thrift.TException;

    public int performUnaryUpdate(String relationName, String column1) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void performBinaryInsert(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performBinaryDelete(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performBinaryUpdate(String relationName, String old_column1, String old_column2, String new_column1, String new_column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryInsert(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryDelete(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void performUnaryUpdate(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int performBinaryInsert(String relationName, String column1, String column2) throws org.apache.thrift.TException
    {
      send_performBinaryInsert(relationName, column1, column2);
      return recv_performBinaryInsert();
    }

    public void send_performBinaryInsert(String relationName, String column1, String column2) throws org.apache.thrift.TException
    {
      performBinaryInsert_args args = new performBinaryInsert_args();
      args.setRelationName(relationName);
      args.setColumn1(column1);
      args.setColumn2(column2);
      sendBase("performBinaryInsert", args);
    }

    public int recv_performBinaryInsert() throws org.apache.thrift.TException
    {
      performBinaryInsert_result result = new performBinaryInsert_result();
      receiveBase(result, "performBinaryInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryInsert failed: unknown result");
    }

    public int performBinaryDelete(String relationName, String column1, String column2) throws org.apache.thrift.TException
    {
      send_performBinaryDelete(relationName, column1, column2);
      return recv_performBinaryDelete();
    }

    public void send_performBinaryDelete(String relationName, String column1, String column2) throws org.apache.thrift.TException
    {
      performBinaryDelete_args args = new performBinaryDelete_args();
      args.setRelationName(relationName);
      args.setColumn1(column1);
      args.setColumn2(column2);
      sendBase("performBinaryDelete", args);
    }

    public int recv_performBinaryDelete() throws org.apache.thrift.TException
    {
      performBinaryDelete_result result = new performBinaryDelete_result();
      receiveBase(result, "performBinaryDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryDelete failed: unknown result");
    }

    public int performBinaryUpdate(String relationName, String old_column1, String old_column2, String new_column1, String new_column2) throws org.apache.thrift.TException
    {
      send_performBinaryUpdate(relationName, old_column1, old_column2, new_column1, new_column2);
      return recv_performBinaryUpdate();
    }

    public void send_performBinaryUpdate(String relationName, String old_column1, String old_column2, String new_column1, String new_column2) throws org.apache.thrift.TException
    {
      performBinaryUpdate_args args = new performBinaryUpdate_args();
      args.setRelationName(relationName);
      args.setOld_column1(old_column1);
      args.setOld_column2(old_column2);
      args.setNew_column1(new_column1);
      args.setNew_column2(new_column2);
      sendBase("performBinaryUpdate", args);
    }

    public int recv_performBinaryUpdate() throws org.apache.thrift.TException
    {
      performBinaryUpdate_result result = new performBinaryUpdate_result();
      receiveBase(result, "performBinaryUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBinaryUpdate failed: unknown result");
    }

    public int performUnaryInsert(String relationName, String column1) throws org.apache.thrift.TException
    {
      send_performUnaryInsert(relationName, column1);
      return recv_performUnaryInsert();
    }

    public void send_performUnaryInsert(String relationName, String column1) throws org.apache.thrift.TException
    {
      performUnaryInsert_args args = new performUnaryInsert_args();
      args.setRelationName(relationName);
      args.setColumn1(column1);
      sendBase("performUnaryInsert", args);
    }

    public int recv_performUnaryInsert() throws org.apache.thrift.TException
    {
      performUnaryInsert_result result = new performUnaryInsert_result();
      receiveBase(result, "performUnaryInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryInsert failed: unknown result");
    }

    public int performUnaryDelete(String relationName, String column1) throws org.apache.thrift.TException
    {
      send_performUnaryDelete(relationName, column1);
      return recv_performUnaryDelete();
    }

    public void send_performUnaryDelete(String relationName, String column1) throws org.apache.thrift.TException
    {
      performUnaryDelete_args args = new performUnaryDelete_args();
      args.setRelationName(relationName);
      args.setColumn1(column1);
      sendBase("performUnaryDelete", args);
    }

    public int recv_performUnaryDelete() throws org.apache.thrift.TException
    {
      performUnaryDelete_result result = new performUnaryDelete_result();
      receiveBase(result, "performUnaryDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryDelete failed: unknown result");
    }

    public int performUnaryUpdate(String relationName, String column1) throws org.apache.thrift.TException
    {
      send_performUnaryUpdate(relationName, column1);
      return recv_performUnaryUpdate();
    }

    public void send_performUnaryUpdate(String relationName, String column1) throws org.apache.thrift.TException
    {
      performUnaryUpdate_args args = new performUnaryUpdate_args();
      args.setRelationName(relationName);
      args.setColumn1(column1);
      sendBase("performUnaryUpdate", args);
    }

    public int recv_performUnaryUpdate() throws org.apache.thrift.TException
    {
      performUnaryUpdate_result result = new performUnaryUpdate_result();
      receiveBase(result, "performUnaryUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performUnaryUpdate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void performBinaryInsert(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryInsert_call method_call = new performBinaryInsert_call(relationName, column1, column2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String column1;
      private String column2;
      public performBinaryInsert_call(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.column1 = column1;
        this.column2 = column2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryInsert_args args = new performBinaryInsert_args();
        args.setRelationName(relationName);
        args.setColumn1(column1);
        args.setColumn2(column2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryInsert();
      }
    }

    public void performBinaryDelete(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryDelete_call method_call = new performBinaryDelete_call(relationName, column1, column2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String column1;
      private String column2;
      public performBinaryDelete_call(String relationName, String column1, String column2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.column1 = column1;
        this.column2 = column2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryDelete_args args = new performBinaryDelete_args();
        args.setRelationName(relationName);
        args.setColumn1(column1);
        args.setColumn2(column2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryDelete();
      }
    }

    public void performBinaryUpdate(String relationName, String old_column1, String old_column2, String new_column1, String new_column2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBinaryUpdate_call method_call = new performBinaryUpdate_call(relationName, old_column1, old_column2, new_column1, new_column2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performBinaryUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String old_column1;
      private String old_column2;
      private String new_column1;
      private String new_column2;
      public performBinaryUpdate_call(String relationName, String old_column1, String old_column2, String new_column1, String new_column2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.old_column1 = old_column1;
        this.old_column2 = old_column2;
        this.new_column1 = new_column1;
        this.new_column2 = new_column2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBinaryUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBinaryUpdate_args args = new performBinaryUpdate_args();
        args.setRelationName(relationName);
        args.setOld_column1(old_column1);
        args.setOld_column2(old_column2);
        args.setNew_column1(new_column1);
        args.setNew_column2(new_column2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBinaryUpdate();
      }
    }

    public void performUnaryInsert(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryInsert_call method_call = new performUnaryInsert_call(relationName, column1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String column1;
      public performUnaryInsert_call(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.column1 = column1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryInsert_args args = new performUnaryInsert_args();
        args.setRelationName(relationName);
        args.setColumn1(column1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryInsert();
      }
    }

    public void performUnaryDelete(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryDelete_call method_call = new performUnaryDelete_call(relationName, column1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String column1;
      public performUnaryDelete_call(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.column1 = column1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryDelete_args args = new performUnaryDelete_args();
        args.setRelationName(relationName);
        args.setColumn1(column1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryDelete();
      }
    }

    public void performUnaryUpdate(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performUnaryUpdate_call method_call = new performUnaryUpdate_call(relationName, column1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class performUnaryUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String relationName;
      private String column1;
      public performUnaryUpdate_call(String relationName, String column1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relationName = relationName;
        this.column1 = column1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performUnaryUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performUnaryUpdate_args args = new performUnaryUpdate_args();
        args.setRelationName(relationName);
        args.setColumn1(column1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performUnaryUpdate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("performBinaryInsert", new performBinaryInsert());
      processMap.put("performBinaryDelete", new performBinaryDelete());
      processMap.put("performBinaryUpdate", new performBinaryUpdate());
      processMap.put("performUnaryInsert", new performUnaryInsert());
      processMap.put("performUnaryDelete", new performUnaryDelete());
      processMap.put("performUnaryUpdate", new performUnaryUpdate());
      return processMap;
    }

    public static class performBinaryInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryInsert_args> {
      public performBinaryInsert() {
        super("performBinaryInsert");
      }

      public performBinaryInsert_args getEmptyArgsInstance() {
        return new performBinaryInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryInsert_result getResult(I iface, performBinaryInsert_args args) throws org.apache.thrift.TException {
        performBinaryInsert_result result = new performBinaryInsert_result();
        result.success = iface.performBinaryInsert(args.relationName, args.column1, args.column2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performBinaryDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryDelete_args> {
      public performBinaryDelete() {
        super("performBinaryDelete");
      }

      public performBinaryDelete_args getEmptyArgsInstance() {
        return new performBinaryDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryDelete_result getResult(I iface, performBinaryDelete_args args) throws org.apache.thrift.TException {
        performBinaryDelete_result result = new performBinaryDelete_result();
        result.success = iface.performBinaryDelete(args.relationName, args.column1, args.column2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performBinaryUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBinaryUpdate_args> {
      public performBinaryUpdate() {
        super("performBinaryUpdate");
      }

      public performBinaryUpdate_args getEmptyArgsInstance() {
        return new performBinaryUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performBinaryUpdate_result getResult(I iface, performBinaryUpdate_args args) throws org.apache.thrift.TException {
        performBinaryUpdate_result result = new performBinaryUpdate_result();
        result.success = iface.performBinaryUpdate(args.relationName, args.old_column1, args.old_column2, args.new_column1, args.new_column2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryInsert_args> {
      public performUnaryInsert() {
        super("performUnaryInsert");
      }

      public performUnaryInsert_args getEmptyArgsInstance() {
        return new performUnaryInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryInsert_result getResult(I iface, performUnaryInsert_args args) throws org.apache.thrift.TException {
        performUnaryInsert_result result = new performUnaryInsert_result();
        result.success = iface.performUnaryInsert(args.relationName, args.column1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryDelete_args> {
      public performUnaryDelete() {
        super("performUnaryDelete");
      }

      public performUnaryDelete_args getEmptyArgsInstance() {
        return new performUnaryDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryDelete_result getResult(I iface, performUnaryDelete_args args) throws org.apache.thrift.TException {
        performUnaryDelete_result result = new performUnaryDelete_result();
        result.success = iface.performUnaryDelete(args.relationName, args.column1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class performUnaryUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performUnaryUpdate_args> {
      public performUnaryUpdate() {
        super("performUnaryUpdate");
      }

      public performUnaryUpdate_args getEmptyArgsInstance() {
        return new performUnaryUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public performUnaryUpdate_result getResult(I iface, performUnaryUpdate_args args) throws org.apache.thrift.TException {
        performUnaryUpdate_result result = new performUnaryUpdate_result();
        result.success = iface.performUnaryUpdate(args.relationName, args.column1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("performBinaryInsert", new performBinaryInsert());
      processMap.put("performBinaryDelete", new performBinaryDelete());
      processMap.put("performBinaryUpdate", new performBinaryUpdate());
      processMap.put("performUnaryInsert", new performUnaryInsert());
      processMap.put("performUnaryDelete", new performUnaryDelete());
      processMap.put("performUnaryUpdate", new performUnaryUpdate());
      return processMap;
    }

    public static class performBinaryInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryInsert_args, Integer> {
      public performBinaryInsert() {
        super("performBinaryInsert");
      }

      public performBinaryInsert_args getEmptyArgsInstance() {
        return new performBinaryInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryInsert_result result = new performBinaryInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryInsert_result result = new performBinaryInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryInsert(args.relationName, args.column1, args.column2,resultHandler);
      }
    }

    public static class performBinaryDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryDelete_args, Integer> {
      public performBinaryDelete() {
        super("performBinaryDelete");
      }

      public performBinaryDelete_args getEmptyArgsInstance() {
        return new performBinaryDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryDelete_result result = new performBinaryDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryDelete_result result = new performBinaryDelete_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryDelete(args.relationName, args.column1, args.column2,resultHandler);
      }
    }

    public static class performBinaryUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBinaryUpdate_args, Integer> {
      public performBinaryUpdate() {
        super("performBinaryUpdate");
      }

      public performBinaryUpdate_args getEmptyArgsInstance() {
        return new performBinaryUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performBinaryUpdate_result result = new performBinaryUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBinaryUpdate_result result = new performBinaryUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performBinaryUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performBinaryUpdate(args.relationName, args.old_column1, args.old_column2, args.new_column1, args.new_column2,resultHandler);
      }
    }

    public static class performUnaryInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryInsert_args, Integer> {
      public performUnaryInsert() {
        super("performUnaryInsert");
      }

      public performUnaryInsert_args getEmptyArgsInstance() {
        return new performUnaryInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryInsert_result result = new performUnaryInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryInsert_result result = new performUnaryInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryInsert(args.relationName, args.column1,resultHandler);
      }
    }

    public static class performUnaryDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryDelete_args, Integer> {
      public performUnaryDelete() {
        super("performUnaryDelete");
      }

      public performUnaryDelete_args getEmptyArgsInstance() {
        return new performUnaryDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryDelete_result result = new performUnaryDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryDelete_result result = new performUnaryDelete_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryDelete(args.relationName, args.column1,resultHandler);
      }
    }

    public static class performUnaryUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performUnaryUpdate_args, Integer> {
      public performUnaryUpdate() {
        super("performUnaryUpdate");
      }

      public performUnaryUpdate_args getEmptyArgsInstance() {
        return new performUnaryUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            performUnaryUpdate_result result = new performUnaryUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performUnaryUpdate_result result = new performUnaryUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, performUnaryUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.performUnaryUpdate(args.relationName, args.column1,resultHandler);
      }
    }

  }

  public static class performBinaryInsert_args implements org.apache.thrift.TBase<performBinaryInsert_args, performBinaryInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryInsert_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("column2", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryInsert_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String column1; // required
    public String column2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      COLUMN1((short)2, "column1"),
      COLUMN2((short)3, "column2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // COLUMN1
            return COLUMN1;
          case 3: // COLUMN2
            return COLUMN2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryInsert_args.class, metaDataMap);
    }

    public performBinaryInsert_args() {
    }

    public performBinaryInsert_args(
      String relationName,
      String column1,
      String column2)
    {
      this();
      this.relationName = relationName;
      this.column1 = column1;
      this.column2 = column2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryInsert_args(performBinaryInsert_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetColumn1()) {
        this.column1 = other.column1;
      }
      if (other.isSetColumn2()) {
        this.column2 = other.column2;
      }
    }

    public performBinaryInsert_args deepCopy() {
      return new performBinaryInsert_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.column1 = null;
      this.column2 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performBinaryInsert_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getColumn1() {
      return this.column1;
    }

    public performBinaryInsert_args setColumn1(String column1) {
      this.column1 = column1;
      return this;
    }

    public void unsetColumn1() {
      this.column1 = null;
    }

    /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn1() {
      return this.column1 != null;
    }

    public void setColumn1IsSet(boolean value) {
      if (!value) {
        this.column1 = null;
      }
    }

    public String getColumn2() {
      return this.column2;
    }

    public performBinaryInsert_args setColumn2(String column2) {
      this.column2 = column2;
      return this;
    }

    public void unsetColumn2() {
      this.column2 = null;
    }

    /** Returns true if field column2 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn2() {
      return this.column2 != null;
    }

    public void setColumn2IsSet(boolean value) {
      if (!value) {
        this.column2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case COLUMN1:
        if (value == null) {
          unsetColumn1();
        } else {
          setColumn1((String)value);
        }
        break;

      case COLUMN2:
        if (value == null) {
          unsetColumn2();
        } else {
          setColumn2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case COLUMN1:
        return getColumn1();

      case COLUMN2:
        return getColumn2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case COLUMN1:
        return isSetColumn1();
      case COLUMN2:
        return isSetColumn2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryInsert_args)
        return this.equals((performBinaryInsert_args)that);
      return false;
    }

    public boolean equals(performBinaryInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_column1 = true && this.isSetColumn1();
      boolean that_present_column1 = true && that.isSetColumn1();
      if (this_present_column1 || that_present_column1) {
        if (!(this_present_column1 && that_present_column1))
          return false;
        if (!this.column1.equals(that.column1))
          return false;
      }

      boolean this_present_column2 = true && this.isSetColumn2();
      boolean that_present_column2 = true && that.isSetColumn2();
      if (this_present_column2 || that_present_column2) {
        if (!(this_present_column2 && that_present_column2))
          return false;
        if (!this.column2.equals(that.column2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn2()).compareTo(other.isSetColumn2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column2, other.column2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryInsert_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column1:");
      if (this.column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.column1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column2:");
      if (this.column2 == null) {
        sb.append("null");
      } else {
        sb.append(this.column2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryInsert_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryInsert_argsStandardScheme getScheme() {
        return new performBinaryInsert_argsStandardScheme();
      }
    }

    private static class performBinaryInsert_argsStandardScheme extends StandardScheme<performBinaryInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column1 = iprot.readString();
                struct.setColumn1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column2 = iprot.readString();
                struct.setColumn2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.column1 != null) {
          oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
          oprot.writeString(struct.column1);
          oprot.writeFieldEnd();
        }
        if (struct.column2 != null) {
          oprot.writeFieldBegin(COLUMN2_FIELD_DESC);
          oprot.writeString(struct.column2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryInsert_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryInsert_argsTupleScheme getScheme() {
        return new performBinaryInsert_argsTupleScheme();
      }
    }

    private static class performBinaryInsert_argsTupleScheme extends TupleScheme<performBinaryInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetColumn1()) {
          optionals.set(1);
        }
        if (struct.isSetColumn2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetColumn1()) {
          oprot.writeString(struct.column1);
        }
        if (struct.isSetColumn2()) {
          oprot.writeString(struct.column2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column1 = iprot.readString();
          struct.setColumn1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.column2 = iprot.readString();
          struct.setColumn2IsSet(true);
        }
      }
    }

  }

  public static class performBinaryInsert_result implements org.apache.thrift.TBase<performBinaryInsert_result, performBinaryInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryInsert_result.class, metaDataMap);
    }

    public performBinaryInsert_result() {
    }

    public performBinaryInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryInsert_result(performBinaryInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryInsert_result deepCopy() {
      return new performBinaryInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryInsert_result)
        return this.equals((performBinaryInsert_result)that);
      return false;
    }

    public boolean equals(performBinaryInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryInsert_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryInsert_resultStandardScheme getScheme() {
        return new performBinaryInsert_resultStandardScheme();
      }
    }

    private static class performBinaryInsert_resultStandardScheme extends StandardScheme<performBinaryInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryInsert_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryInsert_resultTupleScheme getScheme() {
        return new performBinaryInsert_resultTupleScheme();
      }
    }

    private static class performBinaryInsert_resultTupleScheme extends TupleScheme<performBinaryInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performBinaryDelete_args implements org.apache.thrift.TBase<performBinaryDelete_args, performBinaryDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryDelete_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("column2", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryDelete_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String column1; // required
    public String column2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      COLUMN1((short)2, "column1"),
      COLUMN2((short)3, "column2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // COLUMN1
            return COLUMN1;
          case 3: // COLUMN2
            return COLUMN2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryDelete_args.class, metaDataMap);
    }

    public performBinaryDelete_args() {
    }

    public performBinaryDelete_args(
      String relationName,
      String column1,
      String column2)
    {
      this();
      this.relationName = relationName;
      this.column1 = column1;
      this.column2 = column2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryDelete_args(performBinaryDelete_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetColumn1()) {
        this.column1 = other.column1;
      }
      if (other.isSetColumn2()) {
        this.column2 = other.column2;
      }
    }

    public performBinaryDelete_args deepCopy() {
      return new performBinaryDelete_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.column1 = null;
      this.column2 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performBinaryDelete_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getColumn1() {
      return this.column1;
    }

    public performBinaryDelete_args setColumn1(String column1) {
      this.column1 = column1;
      return this;
    }

    public void unsetColumn1() {
      this.column1 = null;
    }

    /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn1() {
      return this.column1 != null;
    }

    public void setColumn1IsSet(boolean value) {
      if (!value) {
        this.column1 = null;
      }
    }

    public String getColumn2() {
      return this.column2;
    }

    public performBinaryDelete_args setColumn2(String column2) {
      this.column2 = column2;
      return this;
    }

    public void unsetColumn2() {
      this.column2 = null;
    }

    /** Returns true if field column2 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn2() {
      return this.column2 != null;
    }

    public void setColumn2IsSet(boolean value) {
      if (!value) {
        this.column2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case COLUMN1:
        if (value == null) {
          unsetColumn1();
        } else {
          setColumn1((String)value);
        }
        break;

      case COLUMN2:
        if (value == null) {
          unsetColumn2();
        } else {
          setColumn2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case COLUMN1:
        return getColumn1();

      case COLUMN2:
        return getColumn2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case COLUMN1:
        return isSetColumn1();
      case COLUMN2:
        return isSetColumn2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryDelete_args)
        return this.equals((performBinaryDelete_args)that);
      return false;
    }

    public boolean equals(performBinaryDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_column1 = true && this.isSetColumn1();
      boolean that_present_column1 = true && that.isSetColumn1();
      if (this_present_column1 || that_present_column1) {
        if (!(this_present_column1 && that_present_column1))
          return false;
        if (!this.column1.equals(that.column1))
          return false;
      }

      boolean this_present_column2 = true && this.isSetColumn2();
      boolean that_present_column2 = true && that.isSetColumn2();
      if (this_present_column2 || that_present_column2) {
        if (!(this_present_column2 && that_present_column2))
          return false;
        if (!this.column2.equals(that.column2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn2()).compareTo(other.isSetColumn2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column2, other.column2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryDelete_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column1:");
      if (this.column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.column1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column2:");
      if (this.column2 == null) {
        sb.append("null");
      } else {
        sb.append(this.column2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryDelete_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryDelete_argsStandardScheme getScheme() {
        return new performBinaryDelete_argsStandardScheme();
      }
    }

    private static class performBinaryDelete_argsStandardScheme extends StandardScheme<performBinaryDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column1 = iprot.readString();
                struct.setColumn1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column2 = iprot.readString();
                struct.setColumn2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.column1 != null) {
          oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
          oprot.writeString(struct.column1);
          oprot.writeFieldEnd();
        }
        if (struct.column2 != null) {
          oprot.writeFieldBegin(COLUMN2_FIELD_DESC);
          oprot.writeString(struct.column2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryDelete_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryDelete_argsTupleScheme getScheme() {
        return new performBinaryDelete_argsTupleScheme();
      }
    }

    private static class performBinaryDelete_argsTupleScheme extends TupleScheme<performBinaryDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetColumn1()) {
          optionals.set(1);
        }
        if (struct.isSetColumn2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetColumn1()) {
          oprot.writeString(struct.column1);
        }
        if (struct.isSetColumn2()) {
          oprot.writeString(struct.column2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column1 = iprot.readString();
          struct.setColumn1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.column2 = iprot.readString();
          struct.setColumn2IsSet(true);
        }
      }
    }

  }

  public static class performBinaryDelete_result implements org.apache.thrift.TBase<performBinaryDelete_result, performBinaryDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryDelete_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryDelete_result.class, metaDataMap);
    }

    public performBinaryDelete_result() {
    }

    public performBinaryDelete_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryDelete_result(performBinaryDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryDelete_result deepCopy() {
      return new performBinaryDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryDelete_result)
        return this.equals((performBinaryDelete_result)that);
      return false;
    }

    public boolean equals(performBinaryDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryDelete_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryDelete_resultStandardScheme getScheme() {
        return new performBinaryDelete_resultStandardScheme();
      }
    }

    private static class performBinaryDelete_resultStandardScheme extends StandardScheme<performBinaryDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryDelete_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryDelete_resultTupleScheme getScheme() {
        return new performBinaryDelete_resultTupleScheme();
      }
    }

    private static class performBinaryDelete_resultTupleScheme extends TupleScheme<performBinaryDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performBinaryUpdate_args implements org.apache.thrift.TBase<performBinaryUpdate_args, performBinaryUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryUpdate_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("old_column1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("old_column2", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("new_column1", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("new_column2", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryUpdate_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String old_column1; // required
    public String old_column2; // required
    public String new_column1; // required
    public String new_column2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      OLD_COLUMN1((short)2, "old_column1"),
      OLD_COLUMN2((short)3, "old_column2"),
      NEW_COLUMN1((short)4, "new_column1"),
      NEW_COLUMN2((short)5, "new_column2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // OLD_COLUMN1
            return OLD_COLUMN1;
          case 3: // OLD_COLUMN2
            return OLD_COLUMN2;
          case 4: // NEW_COLUMN1
            return NEW_COLUMN1;
          case 5: // NEW_COLUMN2
            return NEW_COLUMN2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("old_column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("old_column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("new_column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("new_column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryUpdate_args.class, metaDataMap);
    }

    public performBinaryUpdate_args() {
    }

    public performBinaryUpdate_args(
      String relationName,
      String old_column1,
      String old_column2,
      String new_column1,
      String new_column2)
    {
      this();
      this.relationName = relationName;
      this.old_column1 = old_column1;
      this.old_column2 = old_column2;
      this.new_column1 = new_column1;
      this.new_column2 = new_column2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryUpdate_args(performBinaryUpdate_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetOld_column1()) {
        this.old_column1 = other.old_column1;
      }
      if (other.isSetOld_column2()) {
        this.old_column2 = other.old_column2;
      }
      if (other.isSetNew_column1()) {
        this.new_column1 = other.new_column1;
      }
      if (other.isSetNew_column2()) {
        this.new_column2 = other.new_column2;
      }
    }

    public performBinaryUpdate_args deepCopy() {
      return new performBinaryUpdate_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.old_column1 = null;
      this.old_column2 = null;
      this.new_column1 = null;
      this.new_column2 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performBinaryUpdate_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getOld_column1() {
      return this.old_column1;
    }

    public performBinaryUpdate_args setOld_column1(String old_column1) {
      this.old_column1 = old_column1;
      return this;
    }

    public void unsetOld_column1() {
      this.old_column1 = null;
    }

    /** Returns true if field old_column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetOld_column1() {
      return this.old_column1 != null;
    }

    public void setOld_column1IsSet(boolean value) {
      if (!value) {
        this.old_column1 = null;
      }
    }

    public String getOld_column2() {
      return this.old_column2;
    }

    public performBinaryUpdate_args setOld_column2(String old_column2) {
      this.old_column2 = old_column2;
      return this;
    }

    public void unsetOld_column2() {
      this.old_column2 = null;
    }

    /** Returns true if field old_column2 is set (has been assigned a value) and false otherwise */
    public boolean isSetOld_column2() {
      return this.old_column2 != null;
    }

    public void setOld_column2IsSet(boolean value) {
      if (!value) {
        this.old_column2 = null;
      }
    }

    public String getNew_column1() {
      return this.new_column1;
    }

    public performBinaryUpdate_args setNew_column1(String new_column1) {
      this.new_column1 = new_column1;
      return this;
    }

    public void unsetNew_column1() {
      this.new_column1 = null;
    }

    /** Returns true if field new_column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_column1() {
      return this.new_column1 != null;
    }

    public void setNew_column1IsSet(boolean value) {
      if (!value) {
        this.new_column1 = null;
      }
    }

    public String getNew_column2() {
      return this.new_column2;
    }

    public performBinaryUpdate_args setNew_column2(String new_column2) {
      this.new_column2 = new_column2;
      return this;
    }

    public void unsetNew_column2() {
      this.new_column2 = null;
    }

    /** Returns true if field new_column2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_column2() {
      return this.new_column2 != null;
    }

    public void setNew_column2IsSet(boolean value) {
      if (!value) {
        this.new_column2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case OLD_COLUMN1:
        if (value == null) {
          unsetOld_column1();
        } else {
          setOld_column1((String)value);
        }
        break;

      case OLD_COLUMN2:
        if (value == null) {
          unsetOld_column2();
        } else {
          setOld_column2((String)value);
        }
        break;

      case NEW_COLUMN1:
        if (value == null) {
          unsetNew_column1();
        } else {
          setNew_column1((String)value);
        }
        break;

      case NEW_COLUMN2:
        if (value == null) {
          unsetNew_column2();
        } else {
          setNew_column2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case OLD_COLUMN1:
        return getOld_column1();

      case OLD_COLUMN2:
        return getOld_column2();

      case NEW_COLUMN1:
        return getNew_column1();

      case NEW_COLUMN2:
        return getNew_column2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case OLD_COLUMN1:
        return isSetOld_column1();
      case OLD_COLUMN2:
        return isSetOld_column2();
      case NEW_COLUMN1:
        return isSetNew_column1();
      case NEW_COLUMN2:
        return isSetNew_column2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryUpdate_args)
        return this.equals((performBinaryUpdate_args)that);
      return false;
    }

    public boolean equals(performBinaryUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_old_column1 = true && this.isSetOld_column1();
      boolean that_present_old_column1 = true && that.isSetOld_column1();
      if (this_present_old_column1 || that_present_old_column1) {
        if (!(this_present_old_column1 && that_present_old_column1))
          return false;
        if (!this.old_column1.equals(that.old_column1))
          return false;
      }

      boolean this_present_old_column2 = true && this.isSetOld_column2();
      boolean that_present_old_column2 = true && that.isSetOld_column2();
      if (this_present_old_column2 || that_present_old_column2) {
        if (!(this_present_old_column2 && that_present_old_column2))
          return false;
        if (!this.old_column2.equals(that.old_column2))
          return false;
      }

      boolean this_present_new_column1 = true && this.isSetNew_column1();
      boolean that_present_new_column1 = true && that.isSetNew_column1();
      if (this_present_new_column1 || that_present_new_column1) {
        if (!(this_present_new_column1 && that_present_new_column1))
          return false;
        if (!this.new_column1.equals(that.new_column1))
          return false;
      }

      boolean this_present_new_column2 = true && this.isSetNew_column2();
      boolean that_present_new_column2 = true && that.isSetNew_column2();
      if (this_present_new_column2 || that_present_new_column2) {
        if (!(this_present_new_column2 && that_present_new_column2))
          return false;
        if (!this.new_column2.equals(that.new_column2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOld_column1()).compareTo(other.isSetOld_column1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOld_column1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_column1, other.old_column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOld_column2()).compareTo(other.isSetOld_column2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOld_column2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_column2, other.old_column2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_column1()).compareTo(other.isSetNew_column1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_column1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_column1, other.new_column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_column2()).compareTo(other.isSetNew_column2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_column2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_column2, other.new_column2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryUpdate_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("old_column1:");
      if (this.old_column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.old_column1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("old_column2:");
      if (this.old_column2 == null) {
        sb.append("null");
      } else {
        sb.append(this.old_column2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_column1:");
      if (this.new_column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.new_column1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_column2:");
      if (this.new_column2 == null) {
        sb.append("null");
      } else {
        sb.append(this.new_column2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_argsStandardScheme getScheme() {
        return new performBinaryUpdate_argsStandardScheme();
      }
    }

    private static class performBinaryUpdate_argsStandardScheme extends StandardScheme<performBinaryUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.old_column1 = iprot.readString();
                struct.setOld_column1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_COLUMN2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.old_column2 = iprot.readString();
                struct.setOld_column2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_column1 = iprot.readString();
                struct.setNew_column1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_COLUMN2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_column2 = iprot.readString();
                struct.setNew_column2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.old_column1 != null) {
          oprot.writeFieldBegin(OLD_COLUMN1_FIELD_DESC);
          oprot.writeString(struct.old_column1);
          oprot.writeFieldEnd();
        }
        if (struct.old_column2 != null) {
          oprot.writeFieldBegin(OLD_COLUMN2_FIELD_DESC);
          oprot.writeString(struct.old_column2);
          oprot.writeFieldEnd();
        }
        if (struct.new_column1 != null) {
          oprot.writeFieldBegin(NEW_COLUMN1_FIELD_DESC);
          oprot.writeString(struct.new_column1);
          oprot.writeFieldEnd();
        }
        if (struct.new_column2 != null) {
          oprot.writeFieldBegin(NEW_COLUMN2_FIELD_DESC);
          oprot.writeString(struct.new_column2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_argsTupleScheme getScheme() {
        return new performBinaryUpdate_argsTupleScheme();
      }
    }

    private static class performBinaryUpdate_argsTupleScheme extends TupleScheme<performBinaryUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetOld_column1()) {
          optionals.set(1);
        }
        if (struct.isSetOld_column2()) {
          optionals.set(2);
        }
        if (struct.isSetNew_column1()) {
          optionals.set(3);
        }
        if (struct.isSetNew_column2()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetOld_column1()) {
          oprot.writeString(struct.old_column1);
        }
        if (struct.isSetOld_column2()) {
          oprot.writeString(struct.old_column2);
        }
        if (struct.isSetNew_column1()) {
          oprot.writeString(struct.new_column1);
        }
        if (struct.isSetNew_column2()) {
          oprot.writeString(struct.new_column2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.old_column1 = iprot.readString();
          struct.setOld_column1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.old_column2 = iprot.readString();
          struct.setOld_column2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.new_column1 = iprot.readString();
          struct.setNew_column1IsSet(true);
        }
        if (incoming.get(4)) {
          struct.new_column2 = iprot.readString();
          struct.setNew_column2IsSet(true);
        }
      }
    }

  }

  public static class performBinaryUpdate_result implements org.apache.thrift.TBase<performBinaryUpdate_result, performBinaryUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBinaryUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBinaryUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBinaryUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBinaryUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBinaryUpdate_result.class, metaDataMap);
    }

    public performBinaryUpdate_result() {
    }

    public performBinaryUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performBinaryUpdate_result(performBinaryUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performBinaryUpdate_result deepCopy() {
      return new performBinaryUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performBinaryUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBinaryUpdate_result)
        return this.equals((performBinaryUpdate_result)that);
      return false;
    }

    public boolean equals(performBinaryUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performBinaryUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBinaryUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performBinaryUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_resultStandardScheme getScheme() {
        return new performBinaryUpdate_resultStandardScheme();
      }
    }

    private static class performBinaryUpdate_resultStandardScheme extends StandardScheme<performBinaryUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performBinaryUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public performBinaryUpdate_resultTupleScheme getScheme() {
        return new performBinaryUpdate_resultTupleScheme();
      }
    }

    private static class performBinaryUpdate_resultTupleScheme extends TupleScheme<performBinaryUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBinaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryInsert_args implements org.apache.thrift.TBase<performUnaryInsert_args, performUnaryInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryInsert_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryInsert_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String column1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      COLUMN1((short)2, "column1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // COLUMN1
            return COLUMN1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryInsert_args.class, metaDataMap);
    }

    public performUnaryInsert_args() {
    }

    public performUnaryInsert_args(
      String relationName,
      String column1)
    {
      this();
      this.relationName = relationName;
      this.column1 = column1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryInsert_args(performUnaryInsert_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetColumn1()) {
        this.column1 = other.column1;
      }
    }

    public performUnaryInsert_args deepCopy() {
      return new performUnaryInsert_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.column1 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performUnaryInsert_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getColumn1() {
      return this.column1;
    }

    public performUnaryInsert_args setColumn1(String column1) {
      this.column1 = column1;
      return this;
    }

    public void unsetColumn1() {
      this.column1 = null;
    }

    /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn1() {
      return this.column1 != null;
    }

    public void setColumn1IsSet(boolean value) {
      if (!value) {
        this.column1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case COLUMN1:
        if (value == null) {
          unsetColumn1();
        } else {
          setColumn1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case COLUMN1:
        return getColumn1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case COLUMN1:
        return isSetColumn1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryInsert_args)
        return this.equals((performUnaryInsert_args)that);
      return false;
    }

    public boolean equals(performUnaryInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_column1 = true && this.isSetColumn1();
      boolean that_present_column1 = true && that.isSetColumn1();
      if (this_present_column1 || that_present_column1) {
        if (!(this_present_column1 && that_present_column1))
          return false;
        if (!this.column1.equals(that.column1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryInsert_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column1:");
      if (this.column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.column1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryInsert_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryInsert_argsStandardScheme getScheme() {
        return new performUnaryInsert_argsStandardScheme();
      }
    }

    private static class performUnaryInsert_argsStandardScheme extends StandardScheme<performUnaryInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column1 = iprot.readString();
                struct.setColumn1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.column1 != null) {
          oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
          oprot.writeString(struct.column1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryInsert_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryInsert_argsTupleScheme getScheme() {
        return new performUnaryInsert_argsTupleScheme();
      }
    }

    private static class performUnaryInsert_argsTupleScheme extends TupleScheme<performUnaryInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetColumn1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetColumn1()) {
          oprot.writeString(struct.column1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column1 = iprot.readString();
          struct.setColumn1IsSet(true);
        }
      }
    }

  }

  public static class performUnaryInsert_result implements org.apache.thrift.TBase<performUnaryInsert_result, performUnaryInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryInsert_result.class, metaDataMap);
    }

    public performUnaryInsert_result() {
    }

    public performUnaryInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryInsert_result(performUnaryInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryInsert_result deepCopy() {
      return new performUnaryInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryInsert_result)
        return this.equals((performUnaryInsert_result)that);
      return false;
    }

    public boolean equals(performUnaryInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryInsert_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryInsert_resultStandardScheme getScheme() {
        return new performUnaryInsert_resultStandardScheme();
      }
    }

    private static class performUnaryInsert_resultStandardScheme extends StandardScheme<performUnaryInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryInsert_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryInsert_resultTupleScheme getScheme() {
        return new performUnaryInsert_resultTupleScheme();
      }
    }

    private static class performUnaryInsert_resultTupleScheme extends TupleScheme<performUnaryInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryDelete_args implements org.apache.thrift.TBase<performUnaryDelete_args, performUnaryDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryDelete_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryDelete_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String column1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      COLUMN1((short)2, "column1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // COLUMN1
            return COLUMN1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryDelete_args.class, metaDataMap);
    }

    public performUnaryDelete_args() {
    }

    public performUnaryDelete_args(
      String relationName,
      String column1)
    {
      this();
      this.relationName = relationName;
      this.column1 = column1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryDelete_args(performUnaryDelete_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetColumn1()) {
        this.column1 = other.column1;
      }
    }

    public performUnaryDelete_args deepCopy() {
      return new performUnaryDelete_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.column1 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performUnaryDelete_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getColumn1() {
      return this.column1;
    }

    public performUnaryDelete_args setColumn1(String column1) {
      this.column1 = column1;
      return this;
    }

    public void unsetColumn1() {
      this.column1 = null;
    }

    /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn1() {
      return this.column1 != null;
    }

    public void setColumn1IsSet(boolean value) {
      if (!value) {
        this.column1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case COLUMN1:
        if (value == null) {
          unsetColumn1();
        } else {
          setColumn1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case COLUMN1:
        return getColumn1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case COLUMN1:
        return isSetColumn1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryDelete_args)
        return this.equals((performUnaryDelete_args)that);
      return false;
    }

    public boolean equals(performUnaryDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_column1 = true && this.isSetColumn1();
      boolean that_present_column1 = true && that.isSetColumn1();
      if (this_present_column1 || that_present_column1) {
        if (!(this_present_column1 && that_present_column1))
          return false;
        if (!this.column1.equals(that.column1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryDelete_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column1:");
      if (this.column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.column1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryDelete_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryDelete_argsStandardScheme getScheme() {
        return new performUnaryDelete_argsStandardScheme();
      }
    }

    private static class performUnaryDelete_argsStandardScheme extends StandardScheme<performUnaryDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column1 = iprot.readString();
                struct.setColumn1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.column1 != null) {
          oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
          oprot.writeString(struct.column1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryDelete_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryDelete_argsTupleScheme getScheme() {
        return new performUnaryDelete_argsTupleScheme();
      }
    }

    private static class performUnaryDelete_argsTupleScheme extends TupleScheme<performUnaryDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetColumn1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetColumn1()) {
          oprot.writeString(struct.column1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column1 = iprot.readString();
          struct.setColumn1IsSet(true);
        }
      }
    }

  }

  public static class performUnaryDelete_result implements org.apache.thrift.TBase<performUnaryDelete_result, performUnaryDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryDelete_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryDelete_result.class, metaDataMap);
    }

    public performUnaryDelete_result() {
    }

    public performUnaryDelete_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryDelete_result(performUnaryDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryDelete_result deepCopy() {
      return new performUnaryDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryDelete_result)
        return this.equals((performUnaryDelete_result)that);
      return false;
    }

    public boolean equals(performUnaryDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryDelete_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryDelete_resultStandardScheme getScheme() {
        return new performUnaryDelete_resultStandardScheme();
      }
    }

    private static class performUnaryDelete_resultStandardScheme extends StandardScheme<performUnaryDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryDelete_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryDelete_resultTupleScheme getScheme() {
        return new performUnaryDelete_resultTupleScheme();
      }
    }

    private static class performUnaryDelete_resultTupleScheme extends TupleScheme<performUnaryDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class performUnaryUpdate_args implements org.apache.thrift.TBase<performUnaryUpdate_args, performUnaryUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryUpdate_args");

    private static final org.apache.thrift.protocol.TField RELATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("relationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryUpdate_argsTupleSchemeFactory());
    }

    public String relationName; // required
    public String column1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATION_NAME((short)1, "relationName"),
      COLUMN1((short)2, "column1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATION_NAME
            return RELATION_NAME;
          case 2: // COLUMN1
            return COLUMN1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("relationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryUpdate_args.class, metaDataMap);
    }

    public performUnaryUpdate_args() {
    }

    public performUnaryUpdate_args(
      String relationName,
      String column1)
    {
      this();
      this.relationName = relationName;
      this.column1 = column1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryUpdate_args(performUnaryUpdate_args other) {
      if (other.isSetRelationName()) {
        this.relationName = other.relationName;
      }
      if (other.isSetColumn1()) {
        this.column1 = other.column1;
      }
    }

    public performUnaryUpdate_args deepCopy() {
      return new performUnaryUpdate_args(this);
    }

    @Override
    public void clear() {
      this.relationName = null;
      this.column1 = null;
    }

    public String getRelationName() {
      return this.relationName;
    }

    public performUnaryUpdate_args setRelationName(String relationName) {
      this.relationName = relationName;
      return this;
    }

    public void unsetRelationName() {
      this.relationName = null;
    }

    /** Returns true if field relationName is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationName() {
      return this.relationName != null;
    }

    public void setRelationNameIsSet(boolean value) {
      if (!value) {
        this.relationName = null;
      }
    }

    public String getColumn1() {
      return this.column1;
    }

    public performUnaryUpdate_args setColumn1(String column1) {
      this.column1 = column1;
      return this;
    }

    public void unsetColumn1() {
      this.column1 = null;
    }

    /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn1() {
      return this.column1 != null;
    }

    public void setColumn1IsSet(boolean value) {
      if (!value) {
        this.column1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATION_NAME:
        if (value == null) {
          unsetRelationName();
        } else {
          setRelationName((String)value);
        }
        break;

      case COLUMN1:
        if (value == null) {
          unsetColumn1();
        } else {
          setColumn1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATION_NAME:
        return getRelationName();

      case COLUMN1:
        return getColumn1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATION_NAME:
        return isSetRelationName();
      case COLUMN1:
        return isSetColumn1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryUpdate_args)
        return this.equals((performUnaryUpdate_args)that);
      return false;
    }

    public boolean equals(performUnaryUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_relationName = true && this.isSetRelationName();
      boolean that_present_relationName = true && that.isSetRelationName();
      if (this_present_relationName || that_present_relationName) {
        if (!(this_present_relationName && that_present_relationName))
          return false;
        if (!this.relationName.equals(that.relationName))
          return false;
      }

      boolean this_present_column1 = true && this.isSetColumn1();
      boolean that_present_column1 = true && that.isSetColumn1();
      if (this_present_column1 || that_present_column1) {
        if (!(this_present_column1 && that_present_column1))
          return false;
        if (!this.column1.equals(that.column1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRelationName()).compareTo(other.isSetRelationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationName, other.relationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(other.isSetColumn1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, other.column1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryUpdate_args(");
      boolean first = true;

      sb.append("relationName:");
      if (this.relationName == null) {
        sb.append("null");
      } else {
        sb.append(this.relationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column1:");
      if (this.column1 == null) {
        sb.append("null");
      } else {
        sb.append(this.column1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_argsStandardScheme getScheme() {
        return new performUnaryUpdate_argsStandardScheme();
      }
    }

    private static class performUnaryUpdate_argsStandardScheme extends StandardScheme<performUnaryUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.relationName = iprot.readString();
                struct.setRelationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column1 = iprot.readString();
                struct.setColumn1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relationName != null) {
          oprot.writeFieldBegin(RELATION_NAME_FIELD_DESC);
          oprot.writeString(struct.relationName);
          oprot.writeFieldEnd();
        }
        if (struct.column1 != null) {
          oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
          oprot.writeString(struct.column1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_argsTupleScheme getScheme() {
        return new performUnaryUpdate_argsTupleScheme();
      }
    }

    private static class performUnaryUpdate_argsTupleScheme extends TupleScheme<performUnaryUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelationName()) {
          optionals.set(0);
        }
        if (struct.isSetColumn1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRelationName()) {
          oprot.writeString(struct.relationName);
        }
        if (struct.isSetColumn1()) {
          oprot.writeString(struct.column1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.relationName = iprot.readString();
          struct.setRelationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column1 = iprot.readString();
          struct.setColumn1IsSet(true);
        }
      }
    }

  }

  public static class performUnaryUpdate_result implements org.apache.thrift.TBase<performUnaryUpdate_result, performUnaryUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<performUnaryUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performUnaryUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performUnaryUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performUnaryUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performUnaryUpdate_result.class, metaDataMap);
    }

    public performUnaryUpdate_result() {
    }

    public performUnaryUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public performUnaryUpdate_result(performUnaryUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public performUnaryUpdate_result deepCopy() {
      return new performUnaryUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public performUnaryUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performUnaryUpdate_result)
        return this.equals((performUnaryUpdate_result)that);
      return false;
    }

    public boolean equals(performUnaryUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(performUnaryUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performUnaryUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class performUnaryUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_resultStandardScheme getScheme() {
        return new performUnaryUpdate_resultStandardScheme();
      }
    }

    private static class performUnaryUpdate_resultStandardScheme extends StandardScheme<performUnaryUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class performUnaryUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public performUnaryUpdate_resultTupleScheme getScheme() {
        return new performUnaryUpdate_resultTupleScheme();
      }
    }

    private static class performUnaryUpdate_resultTupleScheme extends TupleScheme<performUnaryUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performUnaryUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
